
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
// CSE 131 Reduced-C Compiler Project
// Copyright (C) 2008-2015 Garo Bournoutian and Rick Ord
// University of California, San Diego
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_AUTO,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TILDE,
    T_TRUE,
    T_WHILE,
    T_VOID,
    T_NEW,
    T_DELETE
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDefStr,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    StructdefDecl,
    CtorDef,
    DtorDef,
    FieldVarsList,
    FieldVarDecl,
    OptCtorDtorList,
    CtorDtorList,
    CtorDtorDecl,
    OptFieldFuncsList,
    FieldFuncsList,
    FieldFuncDecl,
    OptStmtList,
    StmtList,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    WritePairList,
    WritePair,
    Pointer,
    NewStmt,
    DeleteStmt
    ;

non terminal String    
    AddOp,
    MulOp,
    IncDecOp,
    OptRef,
    Equality,
    Relation,
    UnarySign
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    OptInit,
    ParamDecl,
    ConstExpr,
    Array
    ;

non terminal Type
    BasicType,
    DecoratedBasicType,
    StructType,
    Type,
    DecoratedType,
    ReturnType
    ;

non terminal Vector
    OptParamList,
    ParamList,
    OptExprList,
    ExprList,
    OptArrayList,
    ArrayList,
    CtorCall,
    OptCtorCall
    ;

non terminal Integer
    OptPointerList,
    PointerList
    ;
non terminal Boolean
    OptStatic
    ;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=         {:
                        ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                        ((MyParser) parser).DoProgramEnd();
                    :}
    ;


OptGlobalDecls ::=  GlobalDecls
    |               /* empty */
    ;


GlobalDecls ::=     GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=      ExternDecl
    |               VarDecl
    |               ConstDecl
    |               StructdefDecl
    |               FuncDecl
    |               FuncDef
    ;


ExternDecl ::=      T_EXTERN DecoratedBasicType:_2 T_ID:_3 OptArrayList:_4
                    {:
                        ((MyParser) parser).DoExternDecl (_3);
                    :}
                    T_SEMI
    ;


VarDecl ::=         OptStatic:_1 DecoratedType:_2 T_ID:_3 OptArrayList:_4 OptInit:_5
                    {:
                        ((MyParser) parser).DoVarDecl (_1, _3, _2, _5, _4);
                    :}
                    T_SEMI
    |               OptStatic:_1 T_AUTO T_ID:_3 T_ASSIGN Expr:_5
                    {:
                        //_1 is static token, seems need to return a boolean.
                       ((MyParser)parser).doAutoDecl(_1,_3,_5);
                    :}
                    T_SEMI
    |               OptStatic:_1 StructType:_2 T_ID:_3 OptArrayList:_4 OptCtorCall:_5
                    {:
                        ((MyParser) parser).StructCall(_2, _3, _4, _5);
                    :}
                    T_SEMI
    ;


ConstDecl ::=       OptStatic:_1 T_CONST BasicType:_2 T_ID:_3 T_ASSIGN ConstExpr:_5
                    {: //8a
                        ((MyParser) parser).DoConstDecl (_1,_2,_3,_5);
                    :}
                    T_SEMI
    |               OptStatic:_1 T_CONST T_AUTO T_ID:_3 T_ASSIGN ConstExpr:_5
                    {:
                        ((MyParser) parser).DoConstDecl (_1,null,_3,_5);
                    :}
                    T_SEMI
    ;


OptStatic ::=       T_STATIC
                    {:
                        RESULT = true;
                    :}
    |               /* empty */
                    {:
                        RESULT = false;
                    :}
    ;


StructdefDecl ::=   T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoBlockOpen(); //open scope for struct
                        ((MyParser) parser).DoStructdefDecl (_1); // insert struct into global scope
                    :}
                    FieldVarsList
                    OptCtorDtorList
                    {:      //MYS(){};
                        // Put logic here to create default ctor if needed
                    :}
                    OptFieldFuncsList
                    {:
                    //    ((MyParser) parser).DoBlockClose(); //close scope? why ?
                    :}
                    T_RBRACE
                    {:
                        ((MyParser) parser).DoBlockClose();
                    :}
                    T_SEMI
    ;


FieldVarsList ::=   FieldVarDecl
    |               FieldVarsList FieldVarDecl
    ;


FieldVarDecl ::=    DecoratedType:_1 T_ID:_2 OptArrayList:_3 T_SEMI
                    {:
                        ( (MyParser) parser).DoStructVarDecl(_2, _1, _3);
                    :}
    ;

OptCtorDtorList ::= CtorDtorList
    |               /* empty */
    ;


CtorDtorList ::=    CtorDtorDecl
    |               CtorDtorList CtorDtorDecl
    ;


CtorDtorDecl ::=    CtorDef
    |               DtorDef
    ;


CtorDef ::=         T_ID_U:_3
                    {:  //Define constructor
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDeclStr(_3, null, null);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:  // Vector of sto
                         ((MyParser) parser).DoFormalParamsStr(_4);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


DtorDef ::=         T_TILDE T_ID_U:_3
                    {:
                        ((MyParser) parser).SaveLineNum ();
                       // ((MyParser) parser).DoFuncDecl_1("~" + _3, null, null);
                       ((MyParser) parser).DoDestructor(_3);
                    :}
                    T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


OptFieldFuncsList ::= FieldFuncsList
    |               /* empty */
    ;


FieldFuncsList ::=  FieldFuncDecl
    |               FieldFuncsList FieldFuncDecl
    ;


FieldFuncDecl ::=   FuncDefStr
    ;

FuncDefStr ::=      T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                     //  _3 is function name
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDeclStr(_3, _1, _2);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParamsStr(_4);
                    :}
                    T_LBRACE OptStmtList
                    {:
                        ((MyParser) parser).noReturn();
                    :}
                    T_RBRACE
                    {:  //check no return
                        ((MyParser) parser).DoFuncDeclStr_2();

                    :}
    ;




FuncDef ::=         T_FUNCTION T_COLON ReturnType:_1 OptRef:_2 T_ID:_3
                    {:
                     //  _3 is function name
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                    :}
                    T_LBRACE OptStmtList
                    {:  //body code of function
                        //((MyParser) parser).DoFuncDecl_2();
                        ((MyParser) parser).noReturn();
                    :}
                    T_RBRACE
                    {:  //check no return
                        ((MyParser) parser).DoFuncDecl_2();

                    :}
    ;


FuncDecl ::=        T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_3
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_3, null, null);
                    :}
                    T_LPAREN OptParamList:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
                    T_SEMI
    ;


Type ::=            DecoratedType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1
                    {:
                        RESULT = _1;
                    :}
    ;


DecoratedType ::=   DecoratedBasicType:_1
                    {:
                        RESULT = _1;
                    :}
    |               StructType:_1 PointerList:_2
                    {:
                        RESULT = ((MyParser) parser).DoDecoratedStructType(_1, _2);
                    :}
    ;


DecoratedBasicType ::= BasicType:_1 OptPointerList:_2
                    {:
                        //RESULT = _1;    // gotta do something here!
                        RESULT = ((MyParser) parser).DoDecoratedBasicType(_1, _2);
                    :}
    ;


BasicType ::=       T_INT
                    {:
                        RESULT = new TypeInt("int", 4);  // gotta do something here! did
                    :}
    |               T_FLOAT
                    {:
                        RESULT = new TypeFloat("float", 4);  // gotta do something here! did
                    :}
    |               T_BOOL
                    {:
                        RESULT = new TypeBool("bool", 4);  // gotta do something here! did
                    :}
    ;


StructType ::=      T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    :}
    ;


ReturnType ::=      Type:_1
                    {:
                        RESULT = _1;
                    :}
    |               T_VOID
                    {:
                        RESULT = new TypeVoid("void", 0);
                    :}
    ;


OptPointerList ::=  PointerList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
                    {:
                        RESULT = 0;
                    :}
    ;

PointerList ::=     Pointer
                    {:
                        RESULT = new Integer(1);
                    :}
    |               PointerList:_1 Pointer
                    {:
                        RESULT = _1+1;
                    :}
    ;


Pointer ::=         T_STAR
    ;


OptArrayList ::=    ArrayList:_1
                    {:
                       RESULT = _1;
                    :}
    |               /* empty */
    ;

ArrayList ::=       Array:_1
                    {:
                        RESULT = new Vector<STO>();
                        RESULT.add(_1);
                    :}
    |               ArrayList:_2 Array:_1
                    {:
                        _2.addElement(_1);
                        RESULT = _2;
                    :}
    ;

Array ::=           T_LBRACKET ConstExpr:_1 T_RBRACKET
                    {:
                        RESULT = _1;
                    :}
    ;


CodeBlock ::=       T_LBRACE
                    {:
                    :}
                    OptStmtList
                    T_RBRACE
                    {:
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


OptStmtList ::=     StmtList
    |               /* empty */
    ;


StmtList ::=        Stmt
    |               StmtList Stmt
    ;


Stmt ::=            VarDecl
    |               ConstDecl
    |               CodeBlock
                    {:
                        ((MyParser) parser).DoBlockOpen();
                    :}
    |               Expr:_1 T_SEMI
                    {:
                        ((MyParser) parser).ResetUpdateFlag(_1);
                    :}
    |               IfStmt
    |               WhileStmt
                    {:
                        ((MyParser) parser).EndOfWhile();
                    :}
    |               ForeachStmt
                    {:
                        ((MyParser) parser).EndOfWhile();
                    :}
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    |               NewStmt
    |               DeleteStmt
    ;



OptParamList ::=    ParamList:_1
                {:
                    RESULT = _1;
                :}
    |               /* empty */
    ;


ParamList ::=       ParamDecl:_1
                    {:
                        RESULT = new Vector<STO> ();
                        RESULT.addElement (_1);
                    :}
    |               ParamList:_1 T_COMMA ParamDecl:_2
                    {:
                        _1.addElement(_2);
                        RESULT = _1;
                    :}
    ;


ParamDecl ::=       Type:_2 OptRef:_3 T_ID:_1 OptArrayList:_4
                    {:
                        RESULT = ((MyParser) parser).makeVarSto(_1, _2, _3, _4);
                    :}
    ;


OptRef ::=          T_AMPERSAND
                    {:
                        RESULT = "&";
                    :}
    |               /* empty */
    ;


OptInit ::=         T_ASSIGN Expr:_1
                    {:
                       RESULT =  _1;
                    :}
    |               /* empty */
    ;


OptCtorCall ::=     CtorCall:_1
                   {:
                   //check 14
                        RESULT = _1;
                   :}
    |               /* empty */
    ;

CtorCall ::=        T_COLON T_LPAREN OptExprList:_1 T_RPAREN
                    {:
                        RESULT = _1;
                    :}
    ;



IfStmt ::=          T_IF Expr:_1
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).checkIfExpr(_1);
                        ((MyParser) parser).setIfFlag();
                        ((MyParser) parser).DoIfStmt(_1);
                    :}
                    CodeBlock
                    {:
                        // do BA
                        ((MyParser) parser).DoBa();

                    :}
                    OptElse
                    {:
                            ((MyParser) parser).DoElseStmt();

                    :}
    ;


OptElse ::=         T_ELSE
                    {:
                         ((MyParser) parser).DoBlockOpen();
                         ((MyParser) parser).setIfFlag();
                    :}
                    CodeBlock
                    {:
                    :}
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE
                    {:
                      ((MyParser) parser).DoWhileStmt();
                    :}
                    Expr:_1
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).setWhileFlag();
                        ((MyParser) parser).checkIfExpr(_1);
                        ((MyParser) parser).CheckWhileCondition(_1);


                    :}
                    CodeBlock
                    {:
                    :}
    ;


ForeachStmt ::=     T_FOREACH T_LPAREN Type:_1 OptRef:_2 T_ID:_3 T_COLON Expr:_4 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).setForEachFlag();
                        ((MyParser) parser).doForEach(_1, _2, _3, _4);
                        ((MyParser) parser).CheckForEachCondition(_4);

                    :}
                    CodeBlock
                    {:
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
                    {:
                        ((MyParser)parser).doBreak();
                    :}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
                    {:
                        ((MyParser)parser).doContinue();
                    :}
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
                    {:
                        ((MyParser) parser).DoExit(_1);
                    :}
    ;


ReturnStmt ::=      T_RETURN T_SEMI
                    {:
                        ((MyParser) parser).checkReturnType(new ExprSTO("void", new TypeVoid("void", 0)));
                    :}
    |               T_RETURN Expr:_1 T_SEMI
                    {:
                        ((MyParser) parser).checkReturnType(_1);
                    :}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator:_1 T_SEMI
                    {:
                        ((MyParser) parser).DoCin(_1);
                    :}
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList:_1 T_SEMI
                    {:
                    :}
    ;


WritePairList ::=   WritePair
                    {:
                    :}
    |               WritePairList T_OSTREAM WritePair
                    {:
                    :}
    ;


WritePair ::=       Expr:_1
                    {:
                        ((MyParser) parser).PrintCout(_1);
                    :}
    |               T_ENDL
                    {:
                        ((MyParser) parser).CoutEnd();
                    :}
    ;


ConstExpr ::=       Expr:_1
                    {:
                        RESULT = _1;
                    :}
    ;


OptExprList ::=     ExprList:_1
                    {:
                        RESULT = _1;
                    :}
    |               /* empty */
    ;


ExprList ::=        Expr:_1
                    {:
                        RESULT = new Vector<STO> ();
                        RESULT.addElement (_1);
                    :}
    |               ExprList:_1 T_COMMA Expr:_2
                    {:
                        _1.addElement(_2);
                        RESULT = _1;
                    :}
    ;


Expr ::=            Designator:_1 T_ASSIGN Expr:_2
                    {:
                          RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);

                    :}
    |               Expr0:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr0 ::=           Expr0:_1 T_OR Expr1:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBoolean( "||" , "Boolean"));
                    :}
    |               Expr1:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr1 ::=           Expr1:_1 T_AND Expr2:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBoolean( "&&" , "Boolean"));

                    :}
    |               Expr2:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr2 ::=           Expr2:_1 T_BAR Expr3:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "|" , "Bitwise"));
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=           Expr3:_1 T_CARET Expr4:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "^" , "Bitwise"));
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=           Expr4:_1 T_AMPERSAND Expr5:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "&" , "Bitwise"));
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_3 Expr6:_2
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpComparison( _3, "Comparison"));
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_3 Expr7:_2
                    {:
                       // ((MyParser) parser).DoIfStmt(_1,_3,_2); // input should be a expr or boolean, should not call here
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpComparison( _3 , "Comparison"));
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _3, new OpArithmetic( _2 , "Arithmetic"));
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=           Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _3, new OpArithmetic( _2 , "Arithmetic"));
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=        T_EQU
                    {:
                    RESULT = "==";
                    :}
    |               T_NEQ
                    {:
                    RESULT = "!=";
                    :}
    ;


Relation ::=        T_LT
                    {:
                    RESULT = "<";
                    :}
    |               T_GT
                    {:
                    RESULT = ">";
                    :}
    |               T_LTE
                    {:
                    RESULT = "<=";
                    :}
    |               T_GTE
                    {:
                    RESULT = ">=";
                    :}
    ;


AddOp ::=           T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;


MulOp ::=           T_STAR
                    {:
                        RESULT = "*";
                    :}
    |               T_SLASH
                    {:
                        RESULT = "/";
                    :}
    |               T_MOD
                    {:
                        RESULT = "%";
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = "++";
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = "--";
                    :}
    ;


Designator ::=      T_STAR Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoDereference_Star(_1);
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator_Ampersand(_1);
                    :}
    |               UnarySign:_1 Designator:_2
                    {:
                        if(_1.equals("-")){
                            RESULT = ((MyParser) parser).DoUnaryValue(_2);
                        } else {
                            RESULT = _2;
                        }
                    :}
    |               T_NOT Designator:_1
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr(_1, new OpUnary("!", "OpUnary"), "not");
                    :}
    |               T_SIZEOF T_LPAREN Designator:_1 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoDesignator_sizeOf(_1);
                    :}
    |               T_SIZEOF T_LPAREN Type:_1 OptArrayList:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoDesignator_sizeOf_type(_1, _2);
                    :}
    |               T_LPAREN DecoratedType:_1 T_RPAREN Designator:_2
                    {:
                        //type casting
                        RESULT = ((MyParser) parser).DoDesignator_typeCast(_1, _2);
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new OpUnary(_1, "OpUnary"), "pre");
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_2 T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_2
                    {:
                        //RESULT = _1;
                        RESULT = ((MyParser) parser).DoDereference_Arrow(_1, _2);
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        //RESULT = _1;
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, new OpUnary(_2, "OpUnary"), "post");
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_2 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1,  new TypeInt("int", 4), Integer.parseInt(_1));    // fixed
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new TypeFloat("float", 4),  Float.parseFloat(_1));  // fixed
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE
                    {:
                        RESULT = new ConstSTO ("true", new TypeBool("bool", 4), 1);    // fix me! fixed
                    :}
    |               T_FALSE
                    {:
                        RESULT = new ConstSTO ("false", new TypeBool("bool", 4), 0);   // fixed
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ExprSTO ("nullptr", new TypeNullPointer("nullptr", 4));     // fix me!
                    :}
    |               T_THIS
                    {:
                        RESULT = ((MyParser) parser).MakeThisExpr();
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    :}
    ;

NewStmt     ::=      T_NEW Designator:_1 OptCtorCall:_2 T_SEMI
                    {:
                        ((MyParser) parser).checkNewStmt(_1, _2);
                    :}
   ;

DeleteStmt  ::=      T_DELETE Designator:_1 T_SEMI
                    {:
                        ((MyParser) parser).checkDeleteStmt(_1);
                    :}
    ;

UnarySign   ::=     T_PLUS
                    {:
                        RESULT = "+";
                    :}
    |               T_MINUS
                    {:
                        RESULT = "-";
                    :}
    ;

