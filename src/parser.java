
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Fri Nov 06 12:15:23 PST 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Fri Nov 06 12:15:23 PST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\314\000\002\124\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\125\002\000\002\012\010\000\002\126" +
    "\002\000\002\013\011\000\002\127\002\000\002\013\011" +
    "\000\002\130\002\000\002\013\011\000\002\131\002\000" +
    "\002\014\012\000\002\132\002\000\002\014\012\000\002" +
    "\123\003\000\002\123\002\000\002\133\002\000\002\134" +
    "\002\000\002\135\002\000\002\136\002\000\002\015\016" +
    "\000\002\020\003\000\002\020\004\000\002\021\006\000" +
    "\002\022\003\000\002\022\002\000\002\023\003\000\002" +
    "\023\004\000\002\024\003\000\002\024\003\000\002\137" +
    "\002\000\002\140\002\000\002\016\013\000\002\141\002" +
    "\000\002\017\012\000\002\025\003\000\002\025\002\000" +
    "\002\026\003\000\002\026\004\000\002\027\003\000\002" +
    "\142\002\000\002\143\002\000\002\144\002\000\002\010" +
    "\020\000\002\145\002\000\002\146\002\000\002\147\002" +
    "\000\002\007\020\000\002\150\002\000\002\151\002\000" +
    "\002\011\015\000\002\106\003\000\002\106\003\000\002" +
    "\107\003\000\002\107\004\000\002\104\004\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\105\003" +
    "\000\002\110\003\000\002\110\003\000\002\121\003\000" +
    "\002\121\002\000\002\122\003\000\002\122\004\000\002" +
    "\050\003\000\002\115\003\000\002\115\002\000\002\116" +
    "\003\000\002\116\004\000\002\102\005\000\002\152\002" +
    "\000\002\033\006\000\002\030\003\000\002\030\002\000" +
    "\002\031\003\000\002\031\004\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\004\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\111\003\000\002\111\002\000\002\112" +
    "\003\000\002\112\005\000\002\100\006\000\002\056\003" +
    "\000\002\056\002\000\002\077\004\000\002\077\002\000" +
    "\002\120\003\000\002\120\002\000\002\117\006\000\002" +
    "\153\002\000\002\154\002\000\002\034\010\000\002\155" +
    "\002\000\002\035\005\000\002\035\002\000\002\156\002" +
    "\000\002\037\006\000\002\157\002\000\002\036\014\000" +
    "\002\040\004\000\002\041\004\000\002\042\007\000\002" +
    "\043\004\000\002\043\005\000\002\044\006\000\002\045" +
    "\006\000\002\046\003\000\002\046\005\000\002\047\003" +
    "\000\002\047\003\000\002\101\003\000\002\113\003\000" +
    "\002\113\002\000\002\114\003\000\002\114\005\000\002" +
    "\062\005\000\002\062\003\000\002\063\005\000\002\063" +
    "\003\000\002\064\005\000\002\064\003\000\002\065\005" +
    "\000\002\065\003\000\002\066\005\000\002\066\003\000" +
    "\002\067\005\000\002\067\003\000\002\070\005\000\002" +
    "\070\003\000\002\071\005\000\002\071\003\000\002\072" +
    "\005\000\002\072\003\000\002\073\005\000\002\073\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\053\003\000\002\053\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\003\000\002\055\003" +
    "\000\002\074\004\000\002\074\004\000\002\074\004\000" +
    "\002\074\004\000\002\074\006\000\002\074\007\000\002" +
    "\074\006\000\002\074\004\000\002\074\003\000\002\075" +
    "\005\000\002\075\006\000\002\075\005\000\002\075\004" +
    "\000\002\075\006\000\002\075\003\000\002\076\005\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\004\000\002\076\003\000\002\051\006" +
    "\000\002\052\005\000\002\061\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\030\002\001\010\001\012\001\021\001\031" +
    "\001\033\001\035\001\041\001\072\001\073\001\106\001" +
    "\001\002\000\004\002\u0161\001\002\000\030\002\ufffd\010" +
    "\uffe7\012\uffe7\021\uffe7\031\007\033\uffe7\035\011\041\uffe7" +
    "\072\015\073\012\106\uffe7\001\002\000\030\002\ufff6\010" +
    "\ufff6\012\ufff6\021\ufff6\031\ufff6\033\ufff6\035\ufff6\041\ufff6" +
    "\072\ufff6\073\ufff6\106\ufff6\001\002\000\012\012\032\033" +
    "\035\035\u0152\041\036\001\002\000\030\002\ufff7\010\ufff7" +
    "\012\ufff7\021\ufff7\031\ufff7\033\ufff7\035\ufff7\041\ufff7\072" +
    "\ufff7\073\ufff7\106\ufff7\001\002\000\004\016\u0145\001\002" +
    "\000\004\106\261\001\002\000\016\010\030\012\032\021" +
    "\034\033\035\041\036\106\031\001\002\000\030\002\ufff9" +
    "\010\ufff9\012\ufff9\021\ufff9\031\ufff9\033\ufff9\035\ufff9\041" +
    "\ufff9\072\ufff9\073\ufff9\106\ufff9\001\002\000\016\010\uffe8" +
    "\012\uffe8\021\uffe8\033\uffe8\041\uffe8\106\uffe8\001\002\000" +
    "\030\002\ufffc\010\ufffc\012\ufffc\021\ufffc\031\ufffc\033\ufffc" +
    "\035\ufffc\041\ufffc\072\ufffc\073\ufffc\106\ufffc\001\002\000" +
    "\030\002\ufff5\010\ufff5\012\ufff5\021\ufff5\031\ufff5\033\ufff5" +
    "\035\ufff5\041\ufff5\072\ufff5\073\ufff5\106\ufff5\001\002\000" +
    "\030\002\ufffe\010\uffe7\012\uffe7\021\uffe7\031\007\033\uffe7" +
    "\035\011\041\uffe7\072\015\073\012\106\uffe7\001\002\000" +
    "\030\002\ufffa\010\ufffa\012\ufffa\021\ufffa\031\ufffa\033\ufffa" +
    "\035\ufffa\041\ufffa\072\ufffa\073\ufffa\106\ufffa\001\002\000" +
    "\004\002\000\001\002\000\030\002\ufff8\010\ufff8\012\ufff8" +
    "\021\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\072\ufff8\073" +
    "\ufff8\106\ufff8\001\002\000\030\002\ufffb\010\ufffb\012\ufffb" +
    "\021\ufffb\031\ufffb\033\ufffb\035\ufffb\041\ufffb\072\ufffb\073" +
    "\ufffb\106\ufffb\001\002\000\012\004\uffc1\044\uffc1\065\uffc1" +
    "\107\uffc1\001\002\000\004\107\252\001\002\000\014\004" +
    "\uffb7\044\uffb7\065\uffb7\071\116\107\uffb7\001\002\000\004" +
    "\107\243\001\002\000\014\004\uffbb\044\uffbb\065\uffbb\071" +
    "\uffbb\107\uffbb\001\002\000\014\004\uffbc\044\uffbc\065\uffbc" +
    "\071\uffbc\107\uffbc\001\002\000\006\071\116\107\231\001" +
    "\002\000\012\010\040\012\032\033\035\041\036\001\002" +
    "\000\014\004\uffbd\044\uffbd\065\uffbd\071\uffbd\107\uffbd\001" +
    "\002\000\014\004\uffbe\044\uffbe\065\uffbe\071\uffbe\107\uffbe" +
    "\001\002\000\004\107\224\001\002\000\004\107\041\001" +
    "\002\000\004\007\042\001\002\000\046\004\073\017\102" +
    "\032\067\045\075\050\066\051\076\054\063\055\103\060" +
    "\100\061\065\067\071\071\104\074\062\076\054\103\101" +
    "\104\064\105\046\107\072\001\002\000\060\004\uff60\005" +
    "\uff60\007\222\011\uff60\014\uff60\020\uff60\027\uff60\036\uff60" +
    "\037\uff60\043\uff60\046\uff60\047\uff60\050\uff60\052\uff60\053" +
    "\uff60\056\uff60\057\uff60\060\uff60\063\uff60\065\uff60\066\uff60" +
    "\070\uff60\071\uff60\001\002\000\056\004\uff62\005\uff62\011" +
    "\uff62\014\uff62\020\uff62\027\uff62\036\uff62\037\uff62\043\uff62" +
    "\046\uff62\047\uff62\050\uff62\052\174\053\uff62\056\uff62\057" +
    "\uff62\060\uff62\063\uff62\065\uff62\066\uff62\070\176\071\175" +
    "\001\002\000\050\004\uff64\005\uff64\011\uff64\014\uff64\020" +
    "\uff64\027\uff64\036\uff64\037\uff64\043\uff64\046\uff64\047\uff64" +
    "\050\171\053\uff64\056\uff64\057\uff64\060\170\063\uff64\065" +
    "\uff64\066\uff64\001\002\000\076\004\uff40\005\uff40\006\uff40" +
    "\007\uff40\011\uff40\014\uff40\016\uff40\020\uff40\024\uff40\027" +
    "\uff40\036\uff40\037\uff40\043\uff40\044\uff40\045\uff40\046\uff40" +
    "\047\uff40\050\uff40\051\uff40\052\uff40\053\uff40\056\uff40\057" +
    "\uff40\060\uff40\061\uff40\063\uff40\065\uff40\066\uff40\070\uff40" +
    "\071\uff40\001\002\000\044\004\uff66\005\uff66\011\uff66\014" +
    "\uff66\020\uff66\027\uff66\036\166\037\162\043\uff66\046\164" +
    "\047\163\053\uff66\056\uff66\057\uff66\063\uff66\065\uff66\066" +
    "\uff66\001\002\000\076\004\uff44\005\uff44\006\uff44\007\uff44" +
    "\011\uff44\014\uff44\016\uff44\020\uff44\024\uff44\027\uff44\036" +
    "\uff44\037\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44" +
    "\050\uff44\051\uff44\052\uff44\053\uff44\056\uff44\057\uff44\060" +
    "\uff44\061\uff44\063\uff44\065\uff44\066\uff44\070\uff44\071\uff44" +
    "\001\002\000\034\004\uff68\005\uff68\011\uff68\014\uff68\020" +
    "\uff68\027\160\043\uff68\053\157\056\uff68\057\uff68\063\uff68" +
    "\065\uff68\066\uff68\001\002\000\076\004\uff4a\005\uff4a\006" +
    "\207\007\uff4a\011\uff4a\014\uff4a\016\uff4a\020\uff4a\024\206" +
    "\027\uff4a\036\uff4a\037\uff4a\043\uff4a\044\203\045\204\046" +
    "\uff4a\047\uff4a\050\uff4a\051\076\052\uff4a\053\uff4a\056\uff4a" +
    "\057\uff4a\060\uff4a\061\065\063\uff4a\065\uff4a\066\uff4a\070" +
    "\uff4a\071\uff4a\001\002\000\030\004\154\005\uff6a\011\uff6a" +
    "\014\uff6a\020\uff6a\043\uff6a\056\uff6a\057\uff6a\063\uff6a\065" +
    "\uff6a\066\uff6a\001\002\000\076\004\uff3f\005\uff3f\006\uff3f" +
    "\007\uff3f\011\uff3f\014\uff3f\016\uff3f\020\uff3f\024\uff3f\027" +
    "\uff3f\036\uff3f\037\uff3f\043\uff3f\044\uff3f\045\uff3f\046\uff3f" +
    "\047\uff3f\050\uff3f\051\uff3f\052\uff3f\053\uff3f\056\uff3f\057" +
    "\uff3f\060\uff3f\061\uff3f\063\uff3f\065\uff3f\066\uff3f\070\uff3f" +
    "\071\uff3f\001\002\000\026\005\uff6c\011\uff6c\014\152\020" +
    "\uff6c\043\uff6c\056\uff6c\057\uff6c\063\uff6c\065\uff6c\066\uff6c" +
    "\001\002\000\004\066\uffea\001\002\000\024\005\uff6e\011" +
    "\150\020\uff6e\043\uff6e\056\uff6e\057\uff6e\063\uff6e\065\uff6e" +
    "\066\uff6e\001\002\000\022\005\146\020\uff70\043\uff70\056" +
    "\uff70\057\uff70\063\uff70\065\uff70\066\uff70\001\002\000\020" +
    "\020\uff72\043\uff72\056\143\057\uff72\063\uff72\065\uff72\066" +
    "\uff72\001\002\000\076\004\uff3c\005\uff3c\006\uff3c\007\uff3c" +
    "\011\uff3c\014\uff3c\016\uff3c\020\uff3c\024\uff3c\027\uff3c\036" +
    "\uff3c\037\uff3c\043\uff3c\044\uff3c\045\uff3c\046\uff3c\047\uff3c" +
    "\050\uff3c\051\uff3c\052\uff3c\053\uff3c\056\uff3c\057\uff3c\060" +
    "\uff3c\061\uff3c\063\uff3c\065\uff3c\066\uff3c\070\uff3c\071\uff3c" +
    "\001\002\000\046\004\073\017\102\032\067\045\075\050" +
    "\066\051\076\054\063\055\103\060\100\061\065\067\071" +
    "\071\104\074\062\076\054\103\101\104\064\105\046\107" +
    "\072\001\002\000\076\004\uff42\005\uff42\006\uff42\007\uff42" +
    "\011\uff42\014\uff42\016\uff42\020\uff42\024\uff42\027\uff42\036" +
    "\uff42\037\uff42\043\uff42\044\uff42\045\uff42\046\uff42\047\uff42" +
    "\050\uff42\051\uff42\052\uff42\053\uff42\056\uff42\057\uff42\060" +
    "\uff42\061\uff42\063\uff42\065\uff42\066\uff42\070\uff42\071\uff42" +
    "\001\002\000\124\004\uff54\005\uff54\006\uff54\007\uff54\011" +
    "\uff54\014\uff54\016\uff54\017\uff54\020\uff54\024\uff54\027\uff54" +
    "\032\uff54\036\uff54\037\uff54\043\uff54\044\uff54\045\uff54\046" +
    "\uff54\047\uff54\050\uff54\051\uff54\052\uff54\053\uff54\054\uff54" +
    "\055\uff54\056\uff54\057\uff54\060\uff54\061\uff54\063\uff54\065" +
    "\uff54\066\uff54\067\uff54\070\uff54\071\uff54\074\uff54\076\uff54" +
    "\103\uff54\104\uff54\105\uff54\107\uff54\001\002\000\046\004" +
    "\uff36\017\uff36\032\uff36\045\uff36\050\uff36\051\uff36\054\uff36" +
    "\055\uff36\060\uff36\061\uff36\067\uff36\071\uff36\074\uff36\076" +
    "\uff36\103\uff36\104\uff36\105\uff36\107\uff36\001\002\000\076" +
    "\004\uff3e\005\uff3e\006\uff3e\007\uff3e\011\uff3e\014\uff3e\016" +
    "\uff3e\020\uff3e\024\uff3e\027\uff3e\036\uff3e\037\uff3e\043\uff3e" +
    "\044\uff3e\045\uff3e\046\uff3e\047\uff3e\050\uff3e\051\uff3e\052" +
    "\uff3e\053\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\063\uff3e" +
    "\065\uff3e\066\uff3e\070\uff3e\071\uff3e\001\002\000\006\063" +
    "\uff78\066\uff78\001\002\000\004\045\124\001\002\000\076" +
    "\004\uff3a\005\uff3a\006\uff3a\007\uff3a\011\uff3a\014\uff3a\016" +
    "\uff3a\020\uff3a\024\uff3a\027\uff3a\036\uff3a\037\uff3a\043\uff3a" +
    "\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a\051\uff3a\052" +
    "\uff3a\053\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\063\uff3a" +
    "\065\uff3a\066\uff3a\070\uff3a\071\uff3a\001\002\000\046\004" +
    "\073\017\102\032\067\045\075\050\066\051\076\054\063" +
    "\055\103\060\100\061\065\067\071\071\104\074\062\076" +
    "\054\103\101\104\064\105\046\107\072\001\002\000\046" +
    "\004\073\017\102\032\067\045\075\050\066\051\076\054" +
    "\063\055\103\060\100\061\065\067\071\071\104\074\062" +
    "\076\054\103\101\104\064\105\046\107\072\001\002\000" +
    "\056\004\073\012\032\017\102\032\067\033\035\041\036" +
    "\045\075\050\066\051\076\054\063\055\103\060\100\061" +
    "\065\067\071\071\104\074\062\076\054\103\101\104\064" +
    "\105\046\106\031\107\072\001\002\000\124\004\uff53\005" +
    "\uff53\006\uff53\007\uff53\011\uff53\014\uff53\016\uff53\017\uff53" +
    "\020\uff53\024\uff53\027\uff53\032\uff53\036\uff53\037\uff53\043" +
    "\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53" +
    "\052\uff53\053\uff53\054\uff53\055\uff53\056\uff53\057\uff53\060" +
    "\uff53\061\uff53\063\uff53\065\uff53\066\uff53\067\uff53\070\uff53" +
    "\071\uff53\074\uff53\076\uff53\103\uff53\104\uff53\105\uff53\107" +
    "\uff53\001\002\000\046\004\073\017\102\032\067\045\075" +
    "\050\066\051\076\054\063\055\103\060\100\061\065\067" +
    "\071\071\104\074\062\076\054\103\101\104\064\105\046" +
    "\107\072\001\002\000\046\004\uff37\017\uff37\032\uff37\045" +
    "\uff37\050\uff37\051\uff37\054\uff37\055\uff37\060\uff37\061\uff37" +
    "\067\uff37\071\uff37\074\uff37\076\uff37\103\uff37\104\uff37\105" +
    "\uff37\107\uff37\001\002\000\076\004\uff41\005\uff41\006\uff41" +
    "\007\uff41\011\uff41\014\uff41\016\uff41\020\uff41\024\uff41\027" +
    "\uff41\036\uff41\037\uff41\043\uff41\044\uff41\045\uff41\046\uff41" +
    "\047\uff41\050\uff41\051\uff41\052\uff41\053\uff41\056\uff41\057" +
    "\uff41\060\uff41\061\uff41\063\uff41\065\uff41\066\uff41\070\uff41" +
    "\071\uff41\001\002\000\004\107\106\001\002\000\076\004" +
    "\uff3d\005\uff3d\006\uff3d\007\uff3d\011\uff3d\014\uff3d\016\uff3d" +
    "\020\uff3d\024\uff3d\027\uff3d\036\uff3d\037\uff3d\043\uff3d\044" +
    "\uff3d\045\uff3d\046\uff3d\047\uff3d\050\uff3d\051\uff3d\052\uff3d" +
    "\053\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\063\uff3d\065" +
    "\uff3d\066\uff3d\070\uff3d\071\uff3d\001\002\000\046\004\073" +
    "\017\102\032\067\045\075\050\066\051\076\054\063\055" +
    "\103\060\100\061\065\067\071\071\104\074\062\076\054" +
    "\103\101\104\064\105\046\107\072\001\002\000\062\004" +
    "\uff52\005\uff52\007\uff52\011\uff52\014\uff52\016\uff52\020\uff52" +
    "\027\uff52\036\uff52\037\uff52\043\uff52\046\uff52\047\uff52\050" +
    "\uff52\052\uff52\053\uff52\056\uff52\057\uff52\060\uff52\063\uff52" +
    "\065\uff52\066\uff52\070\uff52\071\uff52\001\002\000\076\004" +
    "\uff3b\005\uff3b\006\uff3b\007\uff3b\011\uff3b\014\uff3b\016\uff3b" +
    "\020\uff3b\024\uff3b\027\uff3b\036\uff3b\037\uff3b\043\uff3b\044" +
    "\uff3b\045\uff3b\046\uff3b\047\uff3b\050\uff3b\051\uff3b\052\uff3b" +
    "\053\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\063\uff3b\065" +
    "\uff3b\066\uff3b\070\uff3b\071\uff3b\001\002\000\062\004\uff50" +
    "\005\uff50\007\uff50\011\uff50\014\uff50\016\uff50\020\uff50\027" +
    "\uff50\036\uff50\037\uff50\043\uff50\046\uff50\047\uff50\050\uff50" +
    "\052\uff50\053\uff50\056\uff50\057\uff50\060\uff50\063\uff50\065" +
    "\uff50\066\uff50\070\uff50\071\uff50\001\002\000\004\071\116" +
    "\001\002\000\004\065\114\001\002\000\004\065\113\001" +
    "\002\000\076\004\uff43\005\uff43\006\uff43\007\uff43\011\uff43" +
    "\014\uff43\016\uff43\020\uff43\024\uff43\027\uff43\036\uff43\037" +
    "\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43\050\uff43" +
    "\051\uff43\052\uff43\053\uff43\056\uff43\057\uff43\060\uff43\061" +
    "\uff43\063\uff43\065\uff43\066\uff43\070\uff43\071\uff43\001\002" +
    "\000\046\004\073\017\102\032\067\045\075\050\066\051" +
    "\076\054\063\055\103\060\100\061\065\067\071\071\104" +
    "\074\062\076\054\103\101\104\064\105\046\107\072\001" +
    "\002\000\062\004\uff4c\005\uff4c\007\uff4c\011\uff4c\014\uff4c" +
    "\016\uff4c\020\uff4c\027\uff4c\036\uff4c\037\uff4c\043\uff4c\046" +
    "\uff4c\047\uff4c\050\uff4c\052\uff4c\053\uff4c\056\uff4c\057\uff4c" +
    "\060\uff4c\063\uff4c\065\uff4c\066\uff4c\070\uff4c\071\uff4c\001" +
    "\002\000\014\004\uffb4\044\uffb4\065\uffb4\071\uffb4\107\uffb4" +
    "\001\002\000\014\004\uffc0\044\uffc0\065\uffc0\071\116\107" +
    "\uffc0\001\002\000\014\004\uffb6\044\uffb6\065\uffb6\071\uffb6" +
    "\107\uffb6\001\002\000\014\004\uffb5\044\uffb5\065\uffb5\071" +
    "\uffb5\107\uffb5\001\002\000\062\004\uff4b\005\uff4b\007\uff4b" +
    "\011\uff4b\014\uff4b\016\uff4b\020\uff4b\027\uff4b\036\uff4b\037" +
    "\uff4b\043\uff4b\046\uff4b\047\uff4b\050\uff4b\052\uff4b\053\uff4b" +
    "\056\uff4b\057\uff4b\060\uff4b\063\uff4b\065\uff4b\066\uff4b\070" +
    "\uff4b\071\uff4b\001\002\000\062\004\uff51\005\uff51\007\uff51" +
    "\011\uff51\014\uff51\016\uff51\020\uff51\027\uff51\036\uff51\037" +
    "\uff51\043\uff51\046\uff51\047\uff51\050\uff51\052\uff51\053\uff51" +
    "\056\uff51\057\uff51\060\uff51\063\uff51\065\uff51\066\uff51\070" +
    "\uff51\071\uff51\001\002\000\056\004\073\012\032\017\102" +
    "\032\067\033\035\041\036\045\075\050\066\051\076\054" +
    "\063\055\103\060\100\061\065\067\071\071\104\074\062" +
    "\076\054\103\101\104\064\105\046\106\031\107\072\001" +
    "\002\000\004\065\141\001\002\000\014\004\uffc2\044\uffc2" +
    "\065\uffc2\071\116\107\uffc2\001\002\000\006\044\133\065" +
    "\uffb2\001\002\000\012\004\uffc3\044\uffc3\065\uffc3\107\uffc3" +
    "\001\002\000\016\007\uffb3\016\uffb3\020\uffb3\044\133\065" +
    "\uffb3\066\uffb3\001\002\000\004\065\137\001\002\000\046" +
    "\004\073\017\102\032\067\045\075\050\066\051\076\054" +
    "\063\055\103\060\100\061\065\067\071\071\104\074\062" +
    "\076\054\103\101\104\064\105\046\107\072\001\002\000" +
    "\016\007\uffb1\016\uffb1\020\uffb1\044\uffb1\065\uffb1\066\uffb1" +
    "\001\002\000\004\063\136\001\002\000\016\007\uffaf\016" +
    "\uffaf\020\uffaf\044\uffaf\065\uffaf\066\uffaf\001\002\000\062" +
    "\004\uff4d\005\uff4d\007\uff4d\011\uff4d\014\uff4d\016\uff4d\020" +
    "\uff4d\027\uff4d\036\uff4d\037\uff4d\043\uff4d\046\uff4d\047\uff4d" +
    "\050\uff4d\052\uff4d\053\uff4d\056\uff4d\057\uff4d\060\uff4d\063" +
    "\uff4d\065\uff4d\066\uff4d\070\uff4d\071\uff4d\001\002\000\016" +
    "\007\uffb0\016\uffb0\020\uffb0\044\uffb0\065\uffb0\066\uffb0\001" +
    "\002\000\062\004\uff4e\005\uff4e\007\uff4e\011\uff4e\014\uff4e" +
    "\016\uff4e\020\uff4e\027\uff4e\036\uff4e\037\uff4e\043\uff4e\046" +
    "\uff4e\047\uff4e\050\uff4e\052\uff4e\053\uff4e\056\uff4e\057\uff4e" +
    "\060\uff4e\063\uff4e\065\uff4e\066\uff4e\070\uff4e\071\uff4e\001" +
    "\002\000\062\004\uff4f\005\uff4f\007\uff4f\011\uff4f\014\uff4f" +
    "\016\uff4f\020\uff4f\027\uff4f\036\uff4f\037\uff4f\043\uff4f\046" +
    "\uff4f\047\uff4f\050\uff4f\052\uff4f\053\uff4f\056\uff4f\057\uff4f" +
    "\060\uff4f\063\uff4f\065\uff4f\066\uff4f\070\uff4f\071\uff4f\001" +
    "\002\000\046\004\073\017\102\032\067\045\075\050\066" +
    "\051\076\054\063\055\103\060\100\061\065\067\071\071" +
    "\104\074\062\076\054\103\101\104\064\105\046\107\072" +
    "\001\002\000\056\004\uff60\005\uff60\011\uff60\014\uff60\020" +
    "\uff60\027\uff60\036\uff60\037\uff60\043\uff60\046\uff60\047\uff60" +
    "\050\uff60\052\uff60\053\uff60\056\uff60\057\uff60\060\uff60\063" +
    "\uff60\065\uff60\066\uff60\070\uff60\071\uff60\001\002\000\022" +
    "\005\146\020\uff71\043\uff71\056\uff71\057\uff71\063\uff71\065" +
    "\uff71\066\uff71\001\002\000\046\004\073\017\102\032\067" +
    "\045\075\050\066\051\076\054\063\055\103\060\100\061" +
    "\065\067\071\071\104\074\062\076\054\103\101\104\064" +
    "\105\046\107\072\001\002\000\024\005\uff6f\011\150\020" +
    "\uff6f\043\uff6f\056\uff6f\057\uff6f\063\uff6f\065\uff6f\066\uff6f" +
    "\001\002\000\046\004\073\017\102\032\067\045\075\050" +
    "\066\051\076\054\063\055\103\060\100\061\065\067\071" +
    "\071\104\074\062\076\054\103\101\104\064\105\046\107" +
    "\072\001\002\000\026\005\uff6d\011\uff6d\014\152\020\uff6d" +
    "\043\uff6d\056\uff6d\057\uff6d\063\uff6d\065\uff6d\066\uff6d\001" +
    "\002\000\046\004\073\017\102\032\067\045\075\050\066" +
    "\051\076\054\063\055\103\060\100\061\065\067\071\071" +
    "\104\074\062\076\054\103\101\104\064\105\046\107\072" +
    "\001\002\000\030\004\154\005\uff6b\011\uff6b\014\uff6b\020" +
    "\uff6b\043\uff6b\056\uff6b\057\uff6b\063\uff6b\065\uff6b\066\uff6b" +
    "\001\002\000\046\004\073\017\102\032\067\045\075\050" +
    "\066\051\076\054\063\055\103\060\100\061\065\067\071" +
    "\071\104\074\062\076\054\103\101\104\064\105\046\107" +
    "\072\001\002\000\034\004\uff69\005\uff69\011\uff69\014\uff69" +
    "\020\uff69\027\160\043\uff69\053\157\056\uff69\057\uff69\063" +
    "\uff69\065\uff69\066\uff69\001\002\000\046\004\073\017\102" +
    "\032\067\045\075\050\066\051\076\054\063\055\103\060" +
    "\100\061\065\067\071\071\104\074\062\076\054\103\101" +
    "\104\064\105\046\107\072\001\002\000\046\004\uff5e\017" +
    "\uff5e\032\uff5e\045\uff5e\050\uff5e\051\uff5e\054\uff5e\055\uff5e" +
    "\060\uff5e\061\uff5e\067\uff5e\071\uff5e\074\uff5e\076\uff5e\103" +
    "\uff5e\104\uff5e\105\uff5e\107\uff5e\001\002\000\046\004\uff5f" +
    "\017\uff5f\032\uff5f\045\uff5f\050\uff5f\051\uff5f\054\uff5f\055" +
    "\uff5f\060\uff5f\061\uff5f\067\uff5f\071\uff5f\074\uff5f\076\uff5f" +
    "\103\uff5f\104\uff5f\105\uff5f\107\uff5f\001\002\000\044\004" +
    "\uff67\005\uff67\011\uff67\014\uff67\020\uff67\027\uff67\036\166" +
    "\037\162\043\uff67\046\164\047\163\053\uff67\056\uff67\057" +
    "\uff67\063\uff67\065\uff67\066\uff67\001\002\000\046\004\uff5a" +
    "\017\uff5a\032\uff5a\045\uff5a\050\uff5a\051\uff5a\054\uff5a\055" +
    "\uff5a\060\uff5a\061\uff5a\067\uff5a\071\uff5a\074\uff5a\076\uff5a" +
    "\103\uff5a\104\uff5a\105\uff5a\107\uff5a\001\002\000\046\004" +
    "\uff5b\017\uff5b\032\uff5b\045\uff5b\050\uff5b\051\uff5b\054\uff5b" +
    "\055\uff5b\060\uff5b\061\uff5b\067\uff5b\071\uff5b\074\uff5b\076" +
    "\uff5b\103\uff5b\104\uff5b\105\uff5b\107\uff5b\001\002\000\046" +
    "\004\uff5d\017\uff5d\032\uff5d\045\uff5d\050\uff5d\051\uff5d\054" +
    "\uff5d\055\uff5d\060\uff5d\061\uff5d\067\uff5d\071\uff5d\074\uff5d" +
    "\076\uff5d\103\uff5d\104\uff5d\105\uff5d\107\uff5d\001\002\000" +
    "\046\004\073\017\102\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\046\004\uff5c\017\uff5c\032\uff5c\045\uff5c\050\uff5c\051" +
    "\uff5c\054\uff5c\055\uff5c\060\uff5c\061\uff5c\067\uff5c\071\uff5c" +
    "\074\uff5c\076\uff5c\103\uff5c\104\uff5c\105\uff5c\107\uff5c\001" +
    "\002\000\050\004\uff65\005\uff65\011\uff65\014\uff65\020\uff65" +
    "\027\uff65\036\uff65\037\uff65\043\uff65\046\uff65\047\uff65\050" +
    "\171\053\uff65\056\uff65\057\uff65\060\170\063\uff65\065\uff65" +
    "\066\uff65\001\002\000\046\004\uff59\017\uff59\032\uff59\045" +
    "\uff59\050\uff59\051\uff59\054\uff59\055\uff59\060\uff59\061\uff59" +
    "\067\uff59\071\uff59\074\uff59\076\uff59\103\uff59\104\uff59\105" +
    "\uff59\107\uff59\001\002\000\046\004\uff58\017\uff58\032\uff58" +
    "\045\uff58\050\uff58\051\uff58\054\uff58\055\uff58\060\uff58\061" +
    "\uff58\067\uff58\071\uff58\074\uff58\076\uff58\103\uff58\104\uff58" +
    "\105\uff58\107\uff58\001\002\000\046\004\073\017\102\032" +
    "\067\045\075\050\066\051\076\054\063\055\103\060\100" +
    "\061\065\067\071\071\104\074\062\076\054\103\101\104" +
    "\064\105\046\107\072\001\002\000\056\004\uff63\005\uff63" +
    "\011\uff63\014\uff63\020\uff63\027\uff63\036\uff63\037\uff63\043" +
    "\uff63\046\uff63\047\uff63\050\uff63\052\174\053\uff63\056\uff63" +
    "\057\uff63\060\uff63\063\uff63\065\uff63\066\uff63\070\176\071" +
    "\175\001\002\000\046\004\uff55\017\uff55\032\uff55\045\uff55" +
    "\050\uff55\051\uff55\054\uff55\055\uff55\060\uff55\061\uff55\067" +
    "\uff55\071\uff55\074\uff55\076\uff55\103\uff55\104\uff55\105\uff55" +
    "\107\uff55\001\002\000\046\004\uff57\017\uff57\032\uff57\045" +
    "\uff57\050\uff57\051\uff57\054\uff57\055\uff57\060\uff57\061\uff57" +
    "\067\uff57\071\uff57\074\uff57\076\uff57\103\uff57\104\uff57\105" +
    "\uff57\107\uff57\001\002\000\046\004\uff56\017\uff56\032\uff56" +
    "\045\uff56\050\uff56\051\uff56\054\uff56\055\uff56\060\uff56\061" +
    "\uff56\067\uff56\071\uff56\074\uff56\076\uff56\103\uff56\104\uff56" +
    "\105\uff56\107\uff56\001\002\000\046\004\073\017\102\032" +
    "\067\045\075\050\066\051\076\054\063\055\103\060\100" +
    "\061\065\067\071\071\104\074\062\076\054\103\101\104" +
    "\064\105\046\107\072\001\002\000\056\004\uff61\005\uff61" +
    "\011\uff61\014\uff61\020\uff61\027\uff61\036\uff61\037\uff61\043" +
    "\uff61\046\uff61\047\uff61\050\uff61\052\uff61\053\uff61\056\uff61" +
    "\057\uff61\060\uff61\063\uff61\065\uff61\066\uff61\070\uff61\071" +
    "\uff61\001\002\000\004\066\202\001\002\000\126\002\uffe9" +
    "\004\uffe9\010\uffe9\012\uffe9\013\uffe9\015\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\040\uffe9\041\uffe9\043\uffe9\045\uffe9\050" +
    "\uffe9\051\uffe9\054\uffe9\055\uffe9\060\uffe9\061\uffe9\062\uffe9" +
    "\064\uffe9\067\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\076" +
    "\uffe9\077\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\107\uffe9\001\002\000\046\004\073\017\102\032" +
    "\067\045\075\050\066\051\076\054\063\055\103\060\100" +
    "\061\065\067\071\071\104\074\062\076\054\103\101\104" +
    "\064\105\046\107\072\001\002\000\050\004\073\017\102" +
    "\032\067\045\075\050\066\051\076\054\063\055\103\060" +
    "\100\061\065\065\uff76\067\071\071\104\074\062\076\054" +
    "\103\101\104\064\105\046\107\072\001\002\000\076\004" +
    "\uff46\005\uff46\006\uff46\007\uff46\011\uff46\014\uff46\016\uff46" +
    "\020\uff46\024\uff46\027\uff46\036\uff46\037\uff46\043\uff46\044" +
    "\uff46\045\uff46\046\uff46\047\uff46\050\uff46\051\uff46\052\uff46" +
    "\053\uff46\056\uff46\057\uff46\060\uff46\061\uff46\063\uff46\065" +
    "\uff46\066\uff46\070\uff46\071\uff46\001\002\000\004\107\211" +
    "\001\002\000\004\107\210\001\002\000\076\004\uff47\005" +
    "\uff47\006\uff47\007\uff47\011\uff47\014\uff47\016\uff47\020\uff47" +
    "\024\uff47\027\uff47\036\uff47\037\uff47\043\uff47\044\uff47\045" +
    "\uff47\046\uff47\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47" +
    "\056\uff47\057\uff47\060\uff47\061\uff47\063\uff47\065\uff47\066" +
    "\uff47\070\uff47\071\uff47\001\002\000\076\004\uff49\005\uff49" +
    "\006\uff49\007\uff49\011\uff49\014\uff49\016\uff49\020\uff49\024" +
    "\uff49\027\uff49\036\uff49\037\uff49\043\uff49\044\uff49\045\uff49" +
    "\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49\053\uff49\056" +
    "\uff49\057\uff49\060\uff49\061\uff49\063\uff49\065\uff49\066\uff49" +
    "\070\uff49\071\uff49\001\002\000\006\020\uff75\065\uff75\001" +
    "\002\000\006\020\216\065\uff77\001\002\000\004\065\215" +
    "\001\002\000\076\004\uff45\005\uff45\006\uff45\007\uff45\011" +
    "\uff45\014\uff45\016\uff45\020\uff45\024\uff45\027\uff45\036\uff45" +
    "\037\uff45\043\uff45\044\uff45\045\uff45\046\uff45\047\uff45\050" +
    "\uff45\051\uff45\052\uff45\053\uff45\056\uff45\057\uff45\060\uff45" +
    "\061\uff45\063\uff45\065\uff45\066\uff45\070\uff45\071\uff45\001" +
    "\002\000\046\004\073\017\102\032\067\045\075\050\066" +
    "\051\076\054\063\055\103\060\100\061\065\067\071\071" +
    "\104\074\062\076\054\103\101\104\064\105\046\107\072" +
    "\001\002\000\006\020\uff74\065\uff74\001\002\000\004\063" +
    "\221\001\002\000\076\004\uff48\005\uff48\006\uff48\007\uff48" +
    "\011\uff48\014\uff48\016\uff48\020\uff48\024\uff48\027\uff48\036" +
    "\uff48\037\uff48\043\uff48\044\uff48\045\uff48\046\uff48\047\uff48" +
    "\050\uff48\051\uff48\052\uff48\053\uff48\056\uff48\057\uff48\060" +
    "\uff48\061\uff48\063\uff48\065\uff48\066\uff48\070\uff48\071\uff48" +
    "\001\002\000\046\004\073\017\102\032\067\045\075\050" +
    "\066\051\076\054\063\055\103\060\100\061\065\067\071" +
    "\071\104\074\062\076\054\103\101\104\064\105\046\107" +
    "\072\001\002\000\016\020\uff73\043\uff73\057\uff73\063\uff73" +
    "\065\uff73\066\uff73\001\002\000\004\007\225\001\002\000" +
    "\046\004\073\017\102\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\004\066\uffec\001\002\000\004\066\230\001\002\000" +
    "\126\002\uffeb\004\uffeb\010\uffeb\012\uffeb\013\uffeb\015\uffeb" +
    "\017\uffeb\021\uffeb\022\uffeb\023\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\040\uffeb\041\uffeb\043\uffeb" +
    "\045\uffeb\050\uffeb\051\uffeb\054\uffeb\055\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\064\uffeb\067\uffeb\071\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\076\uffeb\077\uffeb\101\uffeb\102\uffeb\103\uffeb\104" +
    "\uffeb\105\uffeb\106\uffeb\107\uffeb\001\002\000\010\016\uffb2" +
    "\044\133\066\uffb2\001\002\000\006\016\233\066\uff8f\001" +
    "\002\000\004\045\240\001\002\000\004\066\uff90\001\002" +
    "\000\004\066\uffee\001\002\000\004\066\237\001\002\000" +
    "\126\002\uffed\004\uffed\010\uffed\012\uffed\013\uffed\015\uffed" +
    "\017\uffed\021\uffed\022\uffed\023\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed\043\uffed" +
    "\045\uffed\050\uffed\051\uffed\054\uffed\055\uffed\060\uffed\061" +
    "\uffed\062\uffed\064\uffed\067\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104" +
    "\uffed\105\uffed\106\uffed\107\uffed\001\002\000\050\004\073" +
    "\017\102\032\067\045\075\050\066\051\076\054\063\055" +
    "\103\060\100\061\065\065\uff76\067\071\071\104\074\062" +
    "\076\054\103\101\104\064\105\046\107\072\001\002\000" +
    "\004\065\242\001\002\000\004\066\uff8e\001\002\000\004" +
    "\007\244\001\002\000\046\004\073\017\102\032\067\045" +
    "\075\050\066\051\076\054\063\055\103\060\100\061\065" +
    "\067\071\071\104\074\062\076\054\103\101\104\064\105" +
    "\046\107\072\001\002\000\004\066\ufff0\001\002\000\004" +
    "\066\247\001\002\000\126\002\uffef\004\uffef\010\uffef\012" +
    "\uffef\013\uffef\015\uffef\017\uffef\021\uffef\022\uffef\023\uffef" +
    "\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040" +
    "\uffef\041\uffef\043\uffef\045\uffef\050\uffef\051\uffef\054\uffef" +
    "\055\uffef\060\uffef\061\uffef\062\uffef\064\uffef\067\uffef\071" +
    "\uffef\072\uffef\073\uffef\074\uffef\076\uffef\077\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001" +
    "\002\000\012\004\uffbf\044\uffbf\065\uffbf\107\uffbf\001\002" +
    "\000\014\004\uffb8\044\uffb8\065\uffb8\071\116\107\uffb8\001" +
    "\002\000\010\007\uffb2\044\133\066\uffb2\001\002\000\006" +
    "\007\255\066\uff91\001\002\000\004\066\ufff2\001\002\000" +
    "\046\004\073\017\102\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\004\066\uff92\001\002\000\004\066\260\001\002\000" +
    "\126\002\ufff1\004\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\023\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\041\ufff1\043\ufff1" +
    "\045\ufff1\050\ufff1\051\ufff1\054\ufff1\055\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\064\ufff1\067\ufff1\071\ufff1\072\ufff1\073\ufff1" +
    "\074\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103\ufff1\104" +
    "\ufff1\105\ufff1\106\ufff1\107\ufff1\001\002\000\004\043\262" +
    "\001\002\000\012\012\uffe6\033\uffe6\041\uffe6\106\uffe6\001" +
    "\002\000\012\012\032\033\035\041\036\106\031\001\002" +
    "\000\020\012\032\033\035\035\uffdd\041\036\062\uffdd\075" +
    "\273\106\275\001\002\000\004\107\267\001\002\000\020" +
    "\012\uffe1\033\uffe1\035\uffe1\041\uffe1\062\uffe1\075\uffe1\106" +
    "\uffe1\001\002\000\006\044\133\066\uffb2\001\002\000\004" +
    "\066\271\001\002\000\020\012\uffdf\033\uffdf\035\uffdf\041" +
    "\uffdf\062\uffdf\075\uffdf\106\uffdf\001\002\000\012\035\uffd9" +
    "\062\uffd9\075\uffd9\106\uffd9\001\002\000\004\106\u013e\001" +
    "\002\000\020\012\uffe0\033\uffe0\035\uffe0\041\uffe0\062\uffe0" +
    "\075\uffe0\106\uffe0\001\002\000\006\045\uffd8\071\uffbb\001" +
    "\002\000\012\035\uffde\062\uffde\075\273\106\u0134\001\002" +
    "\000\012\035\uffdc\062\uffdc\075\uffdc\106\uffdc\001\002\000" +
    "\012\035\uffda\062\uffda\075\uffda\106\uffda\001\002\000\006" +
    "\035\uffe5\062\uffe5\001\002\000\006\035\304\062\uffd2\001" +
    "\002\000\006\035\uffd1\062\uffd1\001\002\000\004\016\315" +
    "\001\002\000\006\035\uffcf\062\uffcf\001\002\000\006\035" +
    "\304\062\uffd3\001\002\000\004\062\uffe4\001\002\000\004" +
    "\062\311\001\002\000\004\066\uffe3\001\002\000\004\066" +
    "\313\001\002\000\030\002\uffe2\010\uffe2\012\uffe2\021\uffe2" +
    "\031\uffe2\033\uffe2\035\uffe2\041\uffe2\072\uffe2\073\uffe2\106" +
    "\uffe2\001\002\000\006\035\uffd0\062\uffd0\001\002\000\014" +
    "\012\032\033\035\041\036\100\320\106\031\001\002\000" +
    "\006\004\uffba\107\uffba\001\002\000\006\004\321\107\uff93" +
    "\001\002\000\006\004\uffb9\107\uffb9\001\002\000\004\107" +
    "\uff94\001\002\000\004\107\323\001\002\000\004\045\uffce" +
    "\001\002\000\004\045\325\001\002\000\014\012\032\033" +
    "\035\041\036\065\uff98\106\031\001\002\000\006\004\321" +
    "\107\uff93\001\002\000\006\020\u012f\065\uff99\001\002\000" +
    "\006\020\uff97\065\uff97\001\002\000\004\065\332\001\002" +
    "\000\004\043\uffcd\001\002\000\004\043\334\001\002\000" +
    "\116\004\073\010\uffe7\012\uffe7\013\364\015\354\017\102" +
    "\021\uffe7\022\340\023\342\030\360\032\067\033\uffe7\034" +
    "\366\040\371\041\uffe7\043\347\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\062\uffab\064\344\067" +
    "\071\071\104\072\015\074\062\076\054\077\337\101\350" +
    "\102\341\103\101\104\064\105\046\106\uffe7\107\072\001" +
    "\002\000\116\004\uff9f\010\uff9f\012\uff9f\013\uff9f\015\uff9f" +
    "\017\uff9f\021\uff9f\022\uff9f\023\uff9f\030\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\040\uff9f\041\uff9f\043\uff9f\045\uff9f\050\uff9f" +
    "\051\uff9f\054\uff9f\055\uff9f\060\uff9f\061\uff9f\062\uff9f\064" +
    "\uff9f\067\uff9f\071\uff9f\072\uff9f\074\uff9f\076\uff9f\077\uff9f" +
    "\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107" +
    "\uff9f\001\002\000\116\004\uff9e\010\uff9e\012\uff9e\013\uff9e" +
    "\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\030\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\043\uff9e\045\uff9e" +
    "\050\uff9e\051\uff9e\054\uff9e\055\uff9e\060\uff9e\061\uff9e\062" +
    "\uff9e\064\uff9e\067\uff9e\071\uff9e\072\uff9e\074\uff9e\076\uff9e" +
    "\077\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106" +
    "\uff9e\107\uff9e\001\002\000\046\004\073\017\102\032\067" +
    "\045\075\050\066\051\076\054\063\055\103\060\100\061" +
    "\065\067\071\071\104\074\062\076\054\103\101\104\064" +
    "\105\046\107\072\001\002\000\004\066\u012b\001\002\000" +
    "\046\004\073\017\102\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\004\057\u0121\001\002\000\116\004\uff9d\010\uff9d\012" +
    "\uff9d\013\uff9d\015\uff9d\017\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\030\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\041\uff9d\043" +
    "\uff9d\045\uff9d\050\uff9d\051\uff9d\054\uff9d\055\uff9d\060\uff9d" +
    "\061\uff9d\062\uff9d\064\uff9d\067\uff9d\071\uff9d\072\uff9d\074" +
    "\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d" +
    "\105\uff9d\106\uff9d\107\uff9d\001\002\000\050\004\073\017" +
    "\102\032\067\045\075\050\066\051\076\054\063\055\103" +
    "\060\100\061\065\066\u011f\067\071\071\104\074\062\076" +
    "\054\103\101\104\064\105\046\107\072\001\002\000\116" +
    "\004\uff9c\010\uff9c\012\uff9c\013\uff9c\015\uff9c\017\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c" +
    "\040\uff9c\041\uff9c\043\uff9c\045\uff9c\050\uff9c\051\uff9c\054" +
    "\uff9c\055\uff9c\060\uff9c\061\uff9c\062\uff9c\064\uff9c\067\uff9c" +
    "\071\uff9c\072\uff9c\074\uff9c\076\uff9c\077\uff9c\101\uff9c\102" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\001\002" +
    "\000\116\004\uffa3\010\uffa3\012\uffa3\013\uffa3\015\uffa3\017" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\030\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\040\uffa3\041\uffa3\043\uffa3\045\uffa3\050\uffa3\051" +
    "\uffa3\054\uffa3\055\uffa3\060\uffa3\061\uffa3\062\uffa3\064\uffa3" +
    "\067\uffa3\071\uffa3\072\uffa3\074\uffa3\076\uffa3\077\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\001\002\000\116\004\uffae\010\uffae\012\uffae\013\uffae\015" +
    "\uffae\017\uffae\021\uffae\022\uffae\023\uffae\030\uffae\032\uffae" +
    "\033\uffae\034\uffae\040\uffae\041\uffae\043\uffae\045\uffae\050" +
    "\uffae\051\uffae\054\uffae\055\uffae\060\uffae\061\uffae\062\uffae" +
    "\064\uffae\067\uffae\071\uffae\072\uffae\074\uffae\076\uffae\077" +
    "\uffae\101\uffae\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae" +
    "\107\uffae\001\002\000\046\004\073\017\102\032\067\045" +
    "\075\050\066\051\076\054\063\055\103\060\100\061\065" +
    "\067\071\071\104\074\062\076\054\103\101\104\064\105" +
    "\046\107\072\001\002\000\116\004\073\010\uffe7\012\uffe7" +
    "\013\364\015\354\017\102\021\uffe7\022\340\023\342\030" +
    "\360\032\067\033\uffe7\034\366\040\371\041\uffe7\043\347" +
    "\045\075\050\066\051\076\054\063\055\103\060\100\061" +
    "\065\062\uffac\064\344\067\071\071\104\072\015\074\062" +
    "\076\054\077\337\101\350\102\341\103\101\104\064\105" +
    "\046\106\uffe7\107\072\001\002\000\116\004\uff9b\010\uff9b" +
    "\012\uff9b\013\uff9b\015\uff9b\017\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\030\uff9b\032\uff9b\033\uff9b\034\uff9b\040\uff9b\041\uff9b" +
    "\043\uff9b\045\uff9b\050\uff9b\051\uff9b\054\uff9b\055\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\064\uff9b\067\uff9b\071\uff9b\072\uff9b" +
    "\074\uff9b\076\uff9b\077\uff9b\101\uff9b\102\uff9b\103\uff9b\104" +
    "\uff9b\105\uff9b\106\uff9b\107\uff9b\001\002\000\116\004\uffa6" +
    "\010\uffa6\012\uffa6\013\uffa6\015\uffa6\017\uffa6\021\uffa6\022" +
    "\uffa6\023\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6" +
    "\041\uffa6\043\uffa6\045\uffa6\050\uffa6\051\uffa6\054\uffa6\055" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6\067\uffa6\071\uffa6" +
    "\072\uffa6\074\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001\002\000\004" +
    "\042\u0114\001\002\000\116\004\uffa4\010\uffa4\012\uffa4\013" +
    "\uffa4\015\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\030\uffa4" +
    "\032\uffa4\033\uffa4\034\uffa4\040\uffa4\041\uffa4\043\uffa4\045" +
    "\uffa4\050\uffa4\051\uffa4\054\uffa4\055\uffa4\060\uffa4\061\uffa4" +
    "\062\uffa4\064\uffa4\067\uffa4\071\uffa4\072\uffa4\074\uffa4\076" +
    "\uffa4\077\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4" +
    "\106\uffa4\107\uffa4\001\002\000\004\066\u0113\001\002\000" +
    "\004\062\uffcc\001\002\000\004\045\u010d\001\002\000\116" +
    "\004\uffa2\010\uffa2\012\uffa2\013\uffa2\015\uffa2\017\uffa2\021" +
    "\uffa2\022\uffa2\023\uffa2\030\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\040\uffa2\041\uffa2\043\uffa2\045\uffa2\050\uffa2\051\uffa2\054" +
    "\uffa2\055\uffa2\060\uffa2\061\uffa2\062\uffa2\064\uffa2\067\uffa2" +
    "\071\uffa2\072\uffa2\074\uffa2\076\uffa2\077\uffa2\101\uffa2\102" +
    "\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\001\002" +
    "\000\116\004\uffa8\010\uffa8\012\uffa8\013\uffa8\015\uffa8\017" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\030\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\040\uffa8\041\uffa8\043\uffa8\045\uffa8\050\uffa8\051" +
    "\uffa8\054\uffa8\055\uffa8\060\uffa8\061\uffa8\062\uffa8\064\uffa8" +
    "\067\uffa8\071\uffa8\072\uffa8\074\uffa8\076\uffa8\077\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\001\002\000\116\004\uffaa\010\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\030\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\040\uffaa\041\uffaa\043\uffaa\045\uffaa\050" +
    "\uffaa\051\uffaa\054\uffaa\055\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\064\uffaa\067\uffaa\071\uffaa\072\uffaa\074\uffaa\076\uffaa\077" +
    "\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa" +
    "\107\uffaa\001\002\000\004\066\u010c\001\002\000\116\004" +
    "\uffa7\010\uffa7\012\uffa7\013\uffa7\015\uffa7\017\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\040" +
    "\uffa7\041\uffa7\043\uffa7\045\uffa7\050\uffa7\051\uffa7\054\uffa7" +
    "\055\uffa7\060\uffa7\061\uffa7\062\uffa7\064\uffa7\067\uffa7\071" +
    "\uffa7\072\uffa7\074\uffa7\076\uffa7\077\uffa7\101\uffa7\102\uffa7" +
    "\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107\uffa7\001\002\000" +
    "\004\045\u0103\001\002\000\116\004\uffa0\010\uffa0\012\uffa0" +
    "\013\uffa0\015\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\030" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\040\uffa0\041\uffa0\043\uffa0" +
    "\045\uffa0\050\uffa0\051\uffa0\054\uffa0\055\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\064\uffa0\067\uffa0\071\uffa0\072\uffa0\074\uffa0" +
    "\076\uffa0\077\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105" +
    "\uffa0\106\uffa0\107\uffa0\001\002\000\116\004\uff9a\010\uff9a" +
    "\012\uff9a\013\uff9a\015\uff9a\017\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\030\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\041\uff9a" +
    "\043\uff9a\045\uff9a\050\uff9a\051\uff9a\054\uff9a\055\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\064\uff9a\067\uff9a\071\uff9a\072\uff9a" +
    "\074\uff9a\076\uff9a\077\uff9a\101\uff9a\102\uff9a\103\uff9a\104" +
    "\uff9a\105\uff9a\106\uff9a\107\uff9a\001\002\000\046\004\073" +
    "\017\102\032\067\045\075\050\066\051\076\054\063\055" +
    "\103\060\100\061\065\067\071\071\104\074\062\076\054" +
    "\103\101\104\064\105\046\107\072\001\002\000\116\004" +
    "\uffa1\010\uffa1\012\uffa1\013\uffa1\015\uffa1\017\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\030\uffa1\032\uffa1\033\uffa1\034\uffa1\040" +
    "\uffa1\041\uffa1\043\uffa1\045\uffa1\050\uffa1\051\uffa1\054\uffa1" +
    "\055\uffa1\060\uffa1\061\uffa1\062\uffa1\064\uffa1\067\uffa1\071" +
    "\uffa1\072\uffa1\074\uffa1\076\uffa1\077\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\001\002\000" +
    "\004\043\uff8d\001\002\000\004\043\347\001\002\000\120" +
    "\004\uff8c\010\uff8c\012\uff8c\013\uff8c\015\uff8c\017\uff8c\021" +
    "\uff8c\022\uff8c\023\uff8c\025\uff8c\030\uff8c\032\uff8c\033\uff8c" +
    "\034\uff8c\040\uff8c\041\uff8c\043\uff8c\045\uff8c\050\uff8c\051" +
    "\uff8c\054\uff8c\055\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c" +
    "\067\uff8c\071\uff8c\072\uff8c\074\uff8c\076\uff8c\077\uff8c\101" +
    "\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c" +
    "\001\002\000\120\004\uff88\010\uff88\012\uff88\013\uff88\015" +
    "\uff88\017\uff88\021\uff88\022\uff88\023\uff88\025\u0100\030\uff88" +
    "\032\uff88\033\uff88\034\uff88\040\uff88\041\uff88\043\uff88\045" +
    "\uff88\050\uff88\051\uff88\054\uff88\055\uff88\060\uff88\061\uff88" +
    "\062\uff88\064\uff88\067\uff88\071\uff88\072\uff88\074\uff88\076" +
    "\uff88\077\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\001\002\000\116\004\uff8b\010\uff8b\012" +
    "\uff8b\013\uff8b\015\uff8b\017\uff8b\021\uff8b\022\uff8b\023\uff8b" +
    "\030\uff8b\032\uff8b\033\uff8b\034\uff8b\040\uff8b\041\uff8b\043" +
    "\uff8b\045\uff8b\050\uff8b\051\uff8b\054\uff8b\055\uff8b\060\uff8b" +
    "\061\uff8b\062\uff8b\064\uff8b\067\uff8b\071\uff8b\072\uff8b\074" +
    "\uff8b\076\uff8b\077\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b" +
    "\105\uff8b\106\uff8b\107\uff8b\001\002\000\004\043\uff8a\001" +
    "\002\000\004\043\347\001\002\000\116\004\uff89\010\uff89" +
    "\012\uff89\013\uff89\015\uff89\017\uff89\021\uff89\022\uff89\023" +
    "\uff89\030\uff89\032\uff89\033\uff89\034\uff89\040\uff89\041\uff89" +
    "\043\uff89\045\uff89\050\uff89\051\uff89\054\uff89\055\uff89\060" +
    "\uff89\061\uff89\062\uff89\064\uff89\067\uff89\071\uff89\072\uff89" +
    "\074\uff89\076\uff89\077\uff89\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\uff89\106\uff89\107\uff89\001\002\000\012\012\032" +
    "\033\035\041\036\106\031\001\002\000\006\004\321\107" +
    "\uff93\001\002\000\004\107\u0106\001\002\000\004\016\u0107" +
    "\001\002\000\046\004\073\017\102\032\067\045\075\050" +
    "\066\051\076\054\063\055\103\060\100\061\065\067\071" +
    "\071\104\074\062\076\054\103\101\104\064\105\046\107" +
    "\072\001\002\000\004\065\u0109\001\002\000\004\043\uff85" +
    "\001\002\000\004\043\347\001\002\000\116\004\uff84\010" +
    "\uff84\012\uff84\013\uff84\015\uff84\017\uff84\021\uff84\022\uff84" +
    "\023\uff84\030\uff84\032\uff84\033\uff84\034\uff84\040\uff84\041" +
    "\uff84\043\uff84\045\uff84\050\uff84\051\uff84\054\uff84\055\uff84" +
    "\060\uff84\061\uff84\062\uff84\064\uff84\067\uff84\071\uff84\072" +
    "\uff84\074\uff84\076\uff84\077\uff84\101\uff84\102\uff84\103\uff84" +
    "\104\uff84\105\uff84\106\uff84\107\uff84\001\002\000\116\004" +
    "\uff83\010\uff83\012\uff83\013\uff83\015\uff83\017\uff83\021\uff83" +
    "\022\uff83\023\uff83\030\uff83\032\uff83\033\uff83\034\uff83\040" +
    "\uff83\041\uff83\043\uff83\045\uff83\050\uff83\051\uff83\054\uff83" +
    "\055\uff83\060\uff83\061\uff83\062\uff83\064\uff83\067\uff83\071" +
    "\uff83\072\uff83\074\uff83\076\uff83\077\uff83\101\uff83\102\uff83" +
    "\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\001\002\000" +
    "\046\004\073\017\102\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\004\065\u010f\001\002\000\004\066\u0110\001\002\000" +
    "\116\004\uff81\010\uff81\012\uff81\013\uff81\015\uff81\017\uff81" +
    "\021\uff81\022\uff81\023\uff81\030\uff81\032\uff81\033\uff81\034" +
    "\uff81\040\uff81\041\uff81\043\uff81\045\uff81\050\uff81\051\uff81" +
    "\054\uff81\055\uff81\060\uff81\061\uff81\062\uff81\064\uff81\067" +
    "\uff81\071\uff81\072\uff81\074\uff81\076\uff81\077\uff81\101\uff81" +
    "\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\001" +
    "\002\000\004\062\u0112\001\002\000\006\035\uffcb\062\uffcb" +
    "\001\002\000\116\004\uffa5\010\uffa5\012\uffa5\013\uffa5\015" +
    "\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\030\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5\050" +
    "\uffa5\051\uffa5\054\uffa5\055\uffa5\060\uffa5\061\uffa5\062\uffa5" +
    "\064\uffa5\067\uffa5\071\uffa5\072\uffa5\074\uffa5\076\uffa5\077" +
    "\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\107\uffa5\001\002\000\046\004\073\017\102\032\067\045" +
    "\075\050\066\051\076\054\063\055\103\060\100\061\065" +
    "\067\071\071\104\074\062\076\054\103\101\104\064\105" +
    "\046\107\072\001\002\000\004\066\u0116\001\002\000\116" +
    "\004\uff7e\010\uff7e\012\uff7e\013\uff7e\015\uff7e\017\uff7e\021" +
    "\uff7e\022\uff7e\023\uff7e\030\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\040\uff7e\041\uff7e\043\uff7e\045\uff7e\050\uff7e\051\uff7e\054" +
    "\uff7e\055\uff7e\060\uff7e\061\uff7e\062\uff7e\064\uff7e\067\uff7e" +
    "\071\uff7e\072\uff7e\074\uff7e\076\uff7e\077\uff7e\101\uff7e\102" +
    "\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e\001\002" +
    "\000\116\004\uffa9\010\uffa9\012\uffa9\013\uffa9\015\uffa9\017" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\030\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\040\uffa9\041\uffa9\043\uffa9\045\uffa9\050\uffa9\051" +
    "\uffa9\054\uffa9\055\uffa9\060\uffa9\061\uffa9\062\uffa9\064\uffa9" +
    "\067\uffa9\071\uffa9\072\uffa9\074\uffa9\076\uffa9\077\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\001\002\000\006\016\233\066\uff8f\001\002\000\004\066" +
    "\u011a\001\002\000\116\004\uff39\010\uff39\012\uff39\013\uff39" +
    "\015\uff39\017\uff39\021\uff39\022\uff39\023\uff39\030\uff39\032" +
    "\uff39\033\uff39\034\uff39\040\uff39\041\uff39\043\uff39\045\uff39" +
    "\050\uff39\051\uff39\054\uff39\055\uff39\060\uff39\061\uff39\062" +
    "\uff39\064\uff39\067\uff39\071\uff39\072\uff39\074\uff39\076\uff39" +
    "\077\uff39\101\uff39\102\uff39\103\uff39\104\uff39\105\uff39\106" +
    "\uff39\107\uff39\001\002\000\116\004\073\010\uffe7\012\uffe7" +
    "\013\364\015\354\017\102\021\uffe7\022\340\023\342\030" +
    "\360\032\067\033\uffe7\034\366\040\371\041\uffe7\043\347" +
    "\045\075\050\066\051\076\054\063\055\103\060\100\061" +
    "\065\062\uffab\064\344\067\071\071\104\072\015\074\062" +
    "\076\054\077\337\101\350\102\341\103\101\104\064\105" +
    "\046\106\uffe7\107\072\001\002\000\004\062\u011d\001\002" +
    "\000\120\004\uffad\010\uffad\012\uffad\013\uffad\015\uffad\017" +
    "\uffad\021\uffad\022\uffad\023\uffad\025\uffad\030\uffad\032\uffad" +
    "\033\uffad\034\uffad\040\uffad\041\uffad\043\uffad\045\uffad\050" +
    "\uffad\051\uffad\054\uffad\055\uffad\060\uffad\061\uffad\062\uffad" +
    "\064\uffad\067\uffad\071\uffad\072\uffad\074\uffad\076\uffad\077" +
    "\uffad\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\001\002\000\004\066\u0120\001\002\000\116\004" +
    "\uff80\010\uff80\012\uff80\013\uff80\015\uff80\017\uff80\021\uff80" +
    "\022\uff80\023\uff80\030\uff80\032\uff80\033\uff80\034\uff80\040" +
    "\uff80\041\uff80\043\uff80\045\uff80\050\uff80\051\uff80\054\uff80" +
    "\055\uff80\060\uff80\061\uff80\062\uff80\064\uff80\067\uff80\071" +
    "\uff80\072\uff80\074\uff80\076\uff80\077\uff80\101\uff80\102\uff80" +
    "\103\uff80\104\uff80\105\uff80\106\uff80\107\uff80\001\002\000" +
    "\116\004\uff7f\010\uff7f\012\uff7f\013\uff7f\015\uff7f\017\uff7f" +
    "\021\uff7f\022\uff7f\023\uff7f\030\uff7f\032\uff7f\033\uff7f\034" +
    "\uff7f\040\uff7f\041\uff7f\043\uff7f\045\uff7f\050\uff7f\051\uff7f" +
    "\054\uff7f\055\uff7f\060\uff7f\061\uff7f\062\uff7f\064\uff7f\067" +
    "\uff7f\071\uff7f\072\uff7f\074\uff7f\076\uff7f\077\uff7f\101\uff7f" +
    "\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\001" +
    "\002\000\050\004\073\017\102\026\u0124\032\067\045\075" +
    "\050\066\051\076\054\063\055\103\060\100\061\065\067" +
    "\071\071\104\074\062\076\054\103\101\104\064\105\046" +
    "\107\072\001\002\000\006\057\u0126\066\u0127\001\002\000" +
    "\006\057\uff7c\066\uff7c\001\002\000\006\057\uff79\066\uff79" +
    "\001\002\000\006\057\uff7a\066\uff7a\001\002\000\050\004" +
    "\073\017\102\026\u0124\032\067\045\075\050\066\051\076" +
    "\054\063\055\103\060\100\061\065\067\071\071\104\074" +
    "\062\076\054\103\101\104\064\105\046\107\072\001\002" +
    "\000\116\004\uff7d\010\uff7d\012\uff7d\013\uff7d\015\uff7d\017" +
    "\uff7d\021\uff7d\022\uff7d\023\uff7d\030\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\040\uff7d\041\uff7d\043\uff7d\045\uff7d\050\uff7d\051" +
    "\uff7d\054\uff7d\055\uff7d\060\uff7d\061\uff7d\062\uff7d\064\uff7d" +
    "\067\uff7d\071\uff7d\072\uff7d\074\uff7d\076\uff7d\077\uff7d\101" +
    "\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d" +
    "\001\002\000\006\057\uff7b\066\uff7b\001\002\000\004\066" +
    "\u012a\001\002\000\116\004\uff38\010\uff38\012\uff38\013\uff38" +
    "\015\uff38\017\uff38\021\uff38\022\uff38\023\uff38\030\uff38\032" +
    "\uff38\033\uff38\034\uff38\040\uff38\041\uff38\043\uff38\045\uff38" +
    "\050\uff38\051\uff38\054\uff38\055\uff38\060\uff38\061\uff38\062" +
    "\uff38\064\uff38\067\uff38\071\uff38\072\uff38\074\uff38\076\uff38" +
    "\077\uff38\101\uff38\102\uff38\103\uff38\104\uff38\105\uff38\106" +
    "\uff38\107\uff38\001\002\000\116\004\uff82\010\uff82\012\uff82" +
    "\013\uff82\015\uff82\017\uff82\021\uff82\022\uff82\023\uff82\030" +
    "\uff82\032\uff82\033\uff82\034\uff82\040\uff82\041\uff82\043\uff82" +
    "\045\uff82\050\uff82\051\uff82\054\uff82\055\uff82\060\uff82\061" +
    "\uff82\062\uff82\064\uff82\067\uff82\071\uff82\072\uff82\074\uff82" +
    "\076\uff82\077\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105" +
    "\uff82\106\uff82\107\uff82\001\002\000\004\043\uff87\001\002" +
    "\000\004\043\347\001\002\000\116\004\uff86\010\uff86\012" +
    "\uff86\013\uff86\015\uff86\017\uff86\021\uff86\022\uff86\023\uff86" +
    "\030\uff86\032\uff86\033\uff86\034\uff86\040\uff86\041\uff86\043" +
    "\uff86\045\uff86\050\uff86\051\uff86\054\uff86\055\uff86\060\uff86" +
    "\061\uff86\062\uff86\064\uff86\067\uff86\071\uff86\072\uff86\074" +
    "\uff86\076\uff86\077\uff86\101\uff86\102\uff86\103\uff86\104\uff86" +
    "\105\uff86\106\uff86\107\uff86\001\002\000\012\012\032\033" +
    "\035\041\036\106\031\001\002\000\006\020\uff96\065\uff96" +
    "\001\002\000\004\107\u0132\001\002\000\010\020\uffb2\044" +
    "\133\065\uffb2\001\002\000\006\020\uff95\065\uff95\001\002" +
    "\000\004\045\uffd8\001\002\000\012\035\uffdb\062\uffdb\075" +
    "\uffdb\106\uffdb\001\002\000\004\045\u0137\001\002\000\014" +
    "\012\032\033\035\041\036\065\uff98\106\031\001\002\000" +
    "\004\065\u0139\001\002\000\004\043\uffd7\001\002\000\004" +
    "\043\u013b\001\002\000\116\004\073\010\uffe7\012\uffe7\013" +
    "\364\015\354\017\102\021\uffe7\022\340\023\342\030\360" +
    "\032\067\033\uffe7\034\366\040\371\041\uffe7\043\347\045" +
    "\075\050\066\051\076\054\063\055\103\060\100\061\065" +
    "\062\uffab\064\344\067\071\071\104\072\015\074\062\076" +
    "\054\077\337\101\350\102\341\103\101\104\064\105\046" +
    "\106\uffe7\107\072\001\002\000\004\062\u013d\001\002\000" +
    "\012\035\uffd6\062\uffd6\075\uffd6\106\uffd6\001\002\000\004" +
    "\045\uffd5\001\002\000\004\045\u0140\001\002\000\004\065" +
    "\u0141\001\002\000\004\043\u0142\001\002\000\116\004\073" +
    "\010\uffe7\012\uffe7\013\364\015\354\017\102\021\uffe7\022" +
    "\340\023\342\030\360\032\067\033\uffe7\034\366\040\371" +
    "\041\uffe7\043\347\045\075\050\066\051\076\054\063\055" +
    "\103\060\100\061\065\062\uffab\064\344\067\071\071\104" +
    "\072\015\074\062\076\054\077\337\101\350\102\341\103" +
    "\101\104\064\105\046\106\uffe7\107\072\001\002\000\004" +
    "\062\u0144\001\002\000\012\035\uffd4\062\uffd4\075\uffd4\106" +
    "\uffd4\001\002\000\014\012\032\033\035\041\036\100\320" +
    "\106\031\001\002\000\006\004\321\107\uff93\001\002\000" +
    "\004\107\u0148\001\002\000\004\045\uffca\001\002\000\004" +
    "\045\u014a\001\002\000\014\012\032\033\035\041\036\065" +
    "\uff98\106\031\001\002\000\004\065\u014c\001\002\000\004" +
    "\043\uffc9\001\002\000\004\043\u014e\001\002\000\116\004" +
    "\073\010\uffe7\012\uffe7\013\364\015\354\017\102\021\uffe7" +
    "\022\340\023\342\030\360\032\067\033\uffe7\034\366\040" +
    "\371\041\uffe7\043\347\045\075\050\066\051\076\054\063" +
    "\055\103\060\100\061\065\062\uffab\064\344\067\071\071" +
    "\104\072\015\074\062\076\054\077\337\101\350\102\341" +
    "\103\101\104\064\105\046\106\uffe7\107\072\001\002\000" +
    "\004\062\uffc8\001\002\000\004\062\u0151\001\002\000\030" +
    "\002\uffc7\010\uffc7\012\uffc7\021\uffc7\031\uffc7\033\uffc7\035" +
    "\uffc7\041\uffc7\072\uffc7\073\uffc7\106\uffc7\001\002\000\004" +
    "\016\u0158\001\002\000\004\107\u0154\001\002\000\006\044" +
    "\133\066\uffb2\001\002\000\004\066\ufff4\001\002\000\004" +
    "\066\u0157\001\002\000\030\002\ufff3\010\ufff3\012\ufff3\021" +
    "\ufff3\031\ufff3\033\ufff3\035\ufff3\041\ufff3\072\ufff3\073\ufff3" +
    "\106\ufff3\001\002\000\014\012\032\033\035\041\036\100" +
    "\320\106\031\001\002\000\004\107\u015a\001\002\000\004" +
    "\045\uffc6\001\002\000\004\045\u015c\001\002\000\014\012" +
    "\032\033\035\041\036\065\uff98\106\031\001\002\000\004" +
    "\065\u015e\001\002\000\004\066\uffc5\001\002\000\004\066" +
    "\u0160\001\002\000\030\002\uffc4\010\uffc4\012\uffc4\021\uffc4" +
    "\031\uffc4\033\uffc4\035\uffc4\041\uffc4\072\uffc4\073\uffc4\106" +
    "\uffc4\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015f\000\006\003\003\124\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\015\007\016\011\005" +
    "\012\020\013\013\014\022\015\007\123\012\001\001\000" +
    "\002\001\001\000\006\103\026\104\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\103" +
    "\026\104\024\105\032\107\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\023\007\016\011\005\012\020\013\013\014\022" +
    "\015\007\123\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\117\121\247\122\250\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\117\122\116\001\001\000\004\103\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\055\073\061" +
    "\076\062\067\063\060\064\057\065\056\066\054\067\052" +
    "\070\050\071\046\072\044\073\043\074\042\075\051\076" +
    "\047\101\055\001\001\000\002\001\001\000\004\054\176" +
    "\001\001\000\004\053\171\001\001\000\002\001\001\000" +
    "\004\060\164\001\001\000\002\001\001\000\004\057\155" +
    "\001\001\000\004\055\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\132\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\055\073\061\076\074\141\075\051" +
    "\076\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\073\061\076\074" +
    "\122\075\051\076\047\001\001\000\014\055\073\061\076" +
    "\074\121\075\051\076\047\001\001\000\050\055\073\061" +
    "\076\062\111\063\060\064\057\065\056\066\054\067\052" +
    "\070\050\071\046\072\044\073\043\074\042\075\051\076" +
    "\047\103\026\104\024\105\107\107\110\001\001\000\002" +
    "\001\001\000\014\055\073\061\076\074\106\075\051\076" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\055\073\061\076\074" +
    "\104\075\051\076\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\050\117\122\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\055\073\061\076\074\114\075\051\076\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\055\073\061\076\074\124" +
    "\075\051\076\047\103\026\104\024\105\125\106\126\107" +
    "\127\001\001\000\002\001\001\000\006\050\117\122\116" +
    "\001\001\000\010\102\133\115\131\116\130\001\001\000" +
    "\002\001\001\000\004\102\137\001\001\000\002\001\001" +
    "\000\042\055\073\061\076\062\067\063\060\064\057\065" +
    "\056\066\054\067\052\070\050\071\046\072\044\073\043" +
    "\074\042\075\051\076\047\101\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\055\073\061\076\064\144\065\056\066\054\067\052" +
    "\070\050\071\046\072\044\073\043\074\143\075\051\076" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\055\073\061\076\065\146\066\054\067\052\070\050\071" +
    "\046\072\044\073\043\074\143\075\051\076\047\001\001" +
    "\000\002\001\001\000\030\055\073\061\076\066\150\067" +
    "\052\070\050\071\046\072\044\073\043\074\143\075\051" +
    "\076\047\001\001\000\002\001\001\000\026\055\073\061" +
    "\076\067\152\070\050\071\046\072\044\073\043\074\143" +
    "\075\051\076\047\001\001\000\002\001\001\000\024\055" +
    "\073\061\076\070\154\071\046\072\044\073\043\074\143" +
    "\075\051\076\047\001\001\000\004\057\155\001\001\000" +
    "\022\055\073\061\076\071\160\072\044\073\043\074\143" +
    "\075\051\076\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\055\073\061\076\072" +
    "\166\073\043\074\143\075\051\076\047\001\001\000\002" +
    "\001\001\000\004\053\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\055\073\061\076\073\172\074\143" +
    "\075\051\076\047\001\001\000\004\054\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\055\073\061\076\074\177\075\051\076\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\055\073\061\076\062\217\063\060\064\057\065\056\066" +
    "\054\067\052\070\050\071\046\072\044\073\043\074\042" +
    "\075\051\076\047\001\001\000\044\055\073\061\076\062" +
    "\211\063\060\064\057\065\056\066\054\067\052\070\050" +
    "\071\046\072\044\073\043\074\042\075\051\076\047\113" +
    "\213\114\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\055\073\061\076\062\216\063\060\064" +
    "\057\065\056\066\054\067\052\070\050\071\046\072\044" +
    "\073\043\074\042\075\051\076\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\055\073" +
    "\061\076\062\222\063\060\064\057\065\056\066\054\067" +
    "\052\070\050\071\046\072\044\073\043\074\042\075\051" +
    "\076\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\055\073\061\076\062\067\063\060\064\057\065\056" +
    "\066\054\067\052\070\050\071\046\072\044\073\043\074" +
    "\042\075\051\076\047\101\225\001\001\000\004\131\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\102" +
    "\133\115\231\116\130\001\001\000\006\117\233\120\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\130" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\055\073\061\076\062\211\063\060\064\057\065\056\066" +
    "\054\067\052\070\050\071\046\072\044\073\043\074\042" +
    "\075\051\076\047\113\240\114\212\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\055\073" +
    "\061\076\062\244\063\060\064\057\065\056\066\054\067" +
    "\052\070\050\071\046\072\044\073\043\074\042\075\051" +
    "\076\047\001\001\000\004\127\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\120" +
    "\001\001\000\010\102\133\115\252\116\130\001\001\000" +
    "\004\077\253\001\001\000\004\126\256\001\001\000\040" +
    "\055\073\061\076\062\255\063\060\064\057\065\056\066" +
    "\054\067\052\070\050\071\046\072\044\073\043\074\042" +
    "\075\051\076\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\133\262" +
    "\001\001\000\016\020\263\021\265\103\026\104\024\105" +
    "\107\107\264\001\001\000\026\016\277\017\271\021\273" +
    "\022\300\023\275\024\276\103\026\104\024\105\107\107" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\102\133\115\267\116\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u0135\001\001\000\010\016\277\017" +
    "\271\024\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\134\301\001\001\000\012\010\304\025\306\026" +
    "\305\027\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\304\027\313\001\001\000" +
    "\004\135\307\001\001\000\002\001\001\000\004\136\311" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\103\026\104\024\105\125\106\315\107\127" +
    "\110\316\001\001\000\002\001\001\000\004\056\321\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\142\323\001\001\000\002\001\001\000\022\100" +
    "\327\103\026\104\024\105\125\106\325\107\127\111\330" +
    "\112\326\001\001\000\004\056\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\332" +
    "\001\001\000\002\001\001\000\104\013\361\014\364\030" +
    "\356\031\350\032\362\033\352\034\354\036\360\037\345" +
    "\040\371\041\366\042\334\043\335\044\342\045\344\051" +
    "\351\052\367\055\073\061\076\062\355\063\060\064\057" +
    "\065\056\066\054\067\052\070\050\071\046\072\044\073" +
    "\043\074\042\075\051\076\047\123\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\055\073\061\076\062" +
    "\u012b\063\060\064\057\065\056\066\054\067\052\070\050" +
    "\071\046\072\044\073\043\074\042\075\051\076\047\001" +
    "\001\000\002\001\001\000\014\055\073\061\076\074\u0128" +
    "\075\051\076\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\055\073\061\076\062\u011d\063\060\064\057" +
    "\065\056\066\054\067\052\070\050\071\046\072\044\073" +
    "\043\074\042\075\051\076\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\152\u011a\001\001\000\014\055" +
    "\073\061\076\074\u0117\075\051\076\047\001\001\000\100" +
    "\013\361\014\364\032\u0116\033\352\034\354\036\360\037" +
    "\345\040\371\041\366\042\334\043\335\044\342\045\344" +
    "\051\351\052\367\055\073\061\076\062\355\063\060\064" +
    "\057\065\056\066\054\067\052\070\050\071\046\072\044" +
    "\073\043\074\042\075\051\076\047\123\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\144\u0110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\055\073" +
    "\061\076\062\372\063\060\064\057\065\056\066\054\067" +
    "\052\070\050\071\046\072\044\073\043\074\042\075\051" +
    "\076\047\001\001\000\002\001\001\000\004\153\373\001" +
    "\001\000\004\033\374\001\001\000\004\154\375\001\001" +
    "\000\004\035\376\001\001\000\002\001\001\000\004\155" +
    "\u0100\001\001\000\004\033\u0101\001\001\000\002\001\001" +
    "\000\014\103\026\104\024\105\125\106\u0103\107\127\001" +
    "\001\000\004\056\u0104\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\055\073\061\076\062\u0107\063\060\064" +
    "\057\065\056\066\054\067\052\070\050\071\046\072\044" +
    "\073\043\074\042\075\051\076\047\001\001\000\002\001" +
    "\001\000\004\157\u0109\001\001\000\004\033\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\055\073\061" +
    "\076\062\u010d\063\060\064\057\065\056\066\054\067\052" +
    "\070\050\071\046\072\044\073\043\074\042\075\051\076" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\055\073\061\076\074\u0114\075\051\076\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\117\233\120\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\013\361\014\364\030\u011b\031" +
    "\350\032\362\033\352\034\354\036\360\037\345\040\371" +
    "\041\366\042\334\043\335\044\342\045\344\051\351\052" +
    "\367\055\073\061\076\062\355\063\060\064\057\065\056" +
    "\066\054\067\052\070\050\071\046\072\044\073\043\074" +
    "\042\075\051\076\047\123\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\046\u0121\047\u0122\055\073\061\076" +
    "\062\u0124\063\060\064\057\065\056\066\054\067\052\070" +
    "\050\071\046\072\044\073\043\074\042\075\051\076\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\047\u0127\055\073\061\076" +
    "\062\u0124\063\060\064\057\065\056\066\054\067\052\070" +
    "\050\071\046\072\044\073\043\074\042\075\051\076\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\156\u012c" +
    "\001\001\000\004\033\u012d\001\001\000\002\001\001\000" +
    "\016\100\u012f\103\026\104\024\105\125\106\325\107\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\102" +
    "\133\115\u0132\116\130\001\001\000\002\001\001\000\004" +
    "\137\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\100\327\103\026\104\024\105\125\106\325\107\127" +
    "\111\u0137\112\326\001\001\000\002\001\001\000\004\140" +
    "\u0139\001\001\000\002\001\001\000\104\013\361\014\364" +
    "\030\u013b\031\350\032\362\033\352\034\354\036\360\037" +
    "\345\040\371\041\366\042\334\043\335\044\342\045\344" +
    "\051\351\052\367\055\073\061\076\062\355\063\060\064" +
    "\057\065\056\066\054\067\052\070\050\071\046\072\044" +
    "\073\043\074\042\075\051\076\047\123\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\141\u013e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\013\361\014\364\030\u0142\031\350\032\362\033\352" +
    "\034\354\036\360\037\345\040\371\041\366\042\334\043" +
    "\335\044\342\045\344\051\351\052\367\055\073\061\076" +
    "\062\355\063\060\064\057\065\056\066\054\067\052\070" +
    "\050\071\046\072\044\073\043\074\042\075\051\076\047" +
    "\123\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\103\026\104\024\105\125\106\315\107\127\110\u0145" +
    "\001\001\000\004\056\u0146\001\001\000\002\001\001\000" +
    "\004\145\u0148\001\001\000\002\001\001\000\022\100\327" +
    "\103\026\104\024\105\125\106\325\107\127\111\u014a\112" +
    "\326\001\001\000\002\001\001\000\004\146\u014c\001\001" +
    "\000\002\001\001\000\104\013\361\014\364\030\u014e\031" +
    "\350\032\362\033\352\034\354\036\360\037\345\040\371" +
    "\041\366\042\334\043\335\044\342\045\344\051\351\052" +
    "\367\055\073\061\076\062\355\063\060\064\057\065\056" +
    "\066\054\067\052\070\050\071\046\072\044\073\043\074" +
    "\042\075\051\076\047\123\012\001\001\000\004\147\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\102\133\115\u0154\116\130" +
    "\001\001\000\004\125\u0155\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\103\026\104\024\105\125\106\315" +
    "\107\127\110\u0158\001\001\000\002\001\001\000\004\150" +
    "\u015a\001\001\000\002\001\001\000\022\100\327\103\026" +
    "\104\024\105\125\106\325\107\127\111\u015c\112\326\001" +
    "\001\000\002\001\001\000\004\151\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).checkDeleteStmt(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(40/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // NewStmt ::= T_NEW Designator OptCtorCall T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).checkNewStmt(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(39/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator4_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = ((MyParser) parser).MakeThisExpr();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ExprSTO ("nullptr", new TypeNullPointer("nullptr", 4));     // fix me!
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false", new TypeBool("bool", 4), 0);   // fixed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true", new TypeBool("bool", 4), 1);    // fix me! fixed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1, new TypeFloat("float", 4),  Float.parseFloat(_1));  // fixed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1,  new TypeInt("int", 4), Integer.parseInt(_1));    // fixed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //RESULT = _1;
                        RESULT = ((MyParser) parser).DoUnaryExpr (_1, new OpUnary(_2, "OpUnary"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //RESULT = _1;
                        RESULT = ((MyParser) parser).DoDereference_Arrow(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr (_2, new OpUnary(_1, "OpUnary"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator ::= T_LPAREN DecoratedType T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //type casting
                        RESULT = ((MyParser) parser).DoDesignator_typeCast(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator ::= T_SIZEOF T_LPAREN Type OptArrayList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_sizeOf_type(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_sizeOf(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoUnaryExpr(_1, new OpUnary("!", "OpUnary"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_1.equals("-") && (_2 instanceof ConstSTO)){
                            RESULT = ((MyParser) parser).DoUnaryValue(_2);
                        } else {
                            RESULT = _2;
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator_Ampersand(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDereference_Star(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(42/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(41/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Relation ::= T_GTE 
            {
              String RESULT = null;
		
                    RESULT = ">=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Relation ::= T_LTE 
            {
              String RESULT = null;
		
                    RESULT = "<=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Relation ::= T_GT 
            {
              String RESULT = null;
		
                    RESULT = ">";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Relation ::= T_LT 
            {
              String RESULT = null;
		
                    RESULT = "<";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Equality ::= T_NEQ 
            {
              String RESULT = null;
		
                    RESULT = "!=";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Equality ::= T_EQU 
            {
              String RESULT = null;
		
                    RESULT = "==";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _3, new OpArithmetic( _2 , "Arithmetic"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _3, new OpArithmetic( _2 , "Arithmetic"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpComparison( _3 , "Comparison"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpComparison( _3, "Comparison"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "&" , "Bitwise"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "^" , "Bitwise"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBitwise( "|" , "Bitwise"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBoolean( "&&" , "Boolean"));

                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoBinaryExpr(_1, _2, new OpBoolean( "||" , "Boolean"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        _1.addElement(_2);
                        RESULT = _1;
                        //RESULT.addElement (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector<STO> ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OptExprList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(73/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(63/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // WritePair ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).checkReturnType(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).checkReturnType(new ExprSTO("void", new TypeVoid("void", 0)));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(33/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoExit(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(32/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser)parser).doContinue();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(31/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		
                        ((MyParser)parser).doBreak();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ForeachStmt ::= T_FOREACH T_LPAREN Type OptRef T_ID T_COLON Expr T_RPAREN NT$27 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$27 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _4 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).setForEachFlag();
                        ((MyParser) parser).doForEach(_1, _2, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WhileStmt ::= T_WHILE Expr NT$26 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$26 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).setWhileFlag();
                        ((MyParser) parser).checkIfExpr(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OptElse ::= T_ELSE NT$25 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    
              CUP$parser$result = new java_cup.runtime.Symbol(27/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$25 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoBlockOpen();
                         ((MyParser) parser).setIfFlag();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IfStmt ::= T_IF Expr NT$23 CodeBlock NT$24 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$24 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                    
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$23 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).checkIfExpr(_1);
                        ((MyParser) parser).setIfFlag();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CtorCall ::= T_COLON T_LPAREN OptExprList T_RPAREN 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*CtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OptCtorCall ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OptCtorCall ::= CtorCall 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   //check 14
                        RESULT = _1;
                   
              CUP$parser$result = new java_cup.runtime.Symbol(78/*OptCtorCall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT =  _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptRef ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OptRef ::= T_AMPERSAND 
            {
              String RESULT = null;
		
                        RESULT = "&";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ParamDecl ::= Type OptRef T_ID OptArrayList 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).makeVarSto(_1, _2, _3, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        _1.addElement(_2);
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector<STO> ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    RESULT = _1;
                
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;
		
                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CodeBlock ::= T_LBRACE NT$22 OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(25/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$22 ::= 
            {
              Object RESULT = null;

                    
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Array ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(64/*Array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ArrayList ::= ArrayList Array 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        _2.addElement(_1);
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ArrayList ::= Array 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector<STO>();
                        RESULT.add(_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*ArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OptArrayList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptArrayList ::= ArrayList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*OptArrayList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Pointer ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PointerList ::= PointerList Pointer 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1+1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PointerList ::= Pointer 
            {
              Integer RESULT = null;
		
                        RESULT = new Integer(1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(80/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OptPointerList ::= 
            {
              Integer RESULT = null;
		
                        RESULT = 0;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptPointerList ::= PointerList 
            {
              Integer RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
                        RESULT = new TypeVoid("void", 0);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ReturnType ::= Type 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // StructType ::= T_ID_U 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoStructType_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*StructType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
                        RESULT = new TypeBool("bool", 4);  // gotta do something here! did
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
                        RESULT = new TypeFloat("float", 4);  // gotta do something here! did
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
                        RESULT = new TypeInt("int", 4);  // gotta do something here! did
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DecoratedBasicType ::= BasicType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //RESULT = _1;    // gotta do something here!
                        RESULT = ((MyParser) parser).DoDecoratedBasicType(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*DecoratedBasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DecoratedType ::= StructType PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer _2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDecoratedStructType(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DecoratedType ::= DecoratedBasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*DecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Type ::= StructType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Type ::= DecoratedType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$20 T_LPAREN OptParamList T_RPAREN NT$21 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$21 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$20 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_3, null, null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$17 T_LPAREN OptParamList T_RPAREN NT$18 T_LBRACE OptStmtList NT$19 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  //check no return
                        ((MyParser) parser).DoFuncDecl_2();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$19 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        //((MyParser) parser).DoFuncDecl_2();
                        ((MyParser) parser).noReturn();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$18 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$17 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                     //  _3 is function name
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_3, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FuncDefStr ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$14 T_LPAREN OptParamList T_RPAREN NT$15 T_LBRACE OptStmtList NT$16 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  //check no return
                        ((MyParser) parser).DoFuncDecl_2();

                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDefStr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$16 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

                        //((MyParser) parser).DoFuncDecl_2();
                        ((MyParser) parser).noReturn();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$15 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParamsStr(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$14 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                     //  _3 is function name
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDeclStr(_3, _1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FieldFuncDecl ::= FuncDefStr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*FieldFuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FieldFuncsList ::= FieldFuncsList FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FieldFuncsList ::= FieldFuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*FieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptFieldFuncsList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptFieldFuncsList ::= FieldFuncsList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptFieldFuncsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DtorDef ::= T_TILDE T_ID_U NT$13 T_LPAREN T_RPAREN T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*DtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$13 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                       // ((MyParser) parser).DoFuncDecl_1("~" + _3, null, null);
                       ((MyParser) parser).DoDestructor(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CtorDef ::= T_ID_U NT$11 T_LPAREN OptParamList T_RPAREN NT$12 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(12/*CtorDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$12 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  // Vector of sto
                         ((MyParser) parser).DoFormalParamsStr(_4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$11 ::= 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
  //Define constructor
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDeclStr(_3, null, null);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CtorDtorDecl ::= DtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CtorDtorDecl ::= CtorDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CtorDtorDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CtorDtorList ::= CtorDtorList CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CtorDtorList ::= CtorDtorDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*CtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OptCtorDtorList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptCtorDtorList ::= CtorDtorList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*OptCtorDtorList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldVarDecl ::= DecoratedType T_ID OptArrayList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ( (MyParser) parser).DoStructVarDecl(_2, _1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(15/*FieldVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldVarsList ::= FieldVarsList FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldVarsList ::= FieldVarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldVarsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StructdefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$7 FieldVarsList OptCtorDtorList NT$8 OptFieldFuncsList NT$9 T_RBRACE NT$10 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*StructdefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$10 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;

                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

                    //    ((MyParser) parser).DoBlockClose(); //close scope? why ?
                      //  ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
      //MYS(){};
                        // Put logic here to create default ctor if needed
                    
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$7 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen(); //open scope for struct
                        ((MyParser) parser).DoStructdefDecl (_1); // insert struct into global scope
                    
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OptStatic ::= 
            {
              Boolean RESULT = null;
		
                        RESULT = false;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OptStatic ::= T_STATIC 
            {
              Boolean RESULT = null;
		
                        RESULT = true;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(81/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN ConstExpr NT$6 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$6 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoConstDecl (null,_3,_5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ConstDecl ::= OptStatic T_CONST BasicType T_ID T_ASSIGN ConstExpr NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 //8a
                        ((MyParser) parser).DoConstDecl (_2,_3,_5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= OptStatic StructType T_ID OptArrayList OptCtorCall NT$4 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _5 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).StructCall(_2, _3, _4, _5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr NT$3 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        //_1 is static token, seems need to return a boolean.
                       ((MyParser)parser).doAutoDecl(_3,_5);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarDecl ::= OptStatic DecoratedType T_ID OptArrayList OptInit NT$2 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean _1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _5 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoVarDecl (_1, _3, _2, _5, _4);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ExternDecl ::= T_EXTERN DecoratedBasicType T_ID OptArrayList NT$1 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$1 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _4 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= StructdefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                        ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

